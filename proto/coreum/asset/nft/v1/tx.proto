syntax = "proto3";
package coreum.asset.nft.v1;

import "amino/amino.proto";
import "coreum/asset/nft/v1/nft.proto";
import "coreum/asset/nft/v1/params.proto";
import "coreum/asset/nft/v1/types.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";

option go_package = "github.com/CoreumFoundation/coreum/v4/x/asset/nft/types";
option (gogoproto.goproto_getters_all) = false;

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // IssueClass creates new non-fungible token class.
  rpc IssueClass(MsgIssueClass) returns (EmptyResponse);
  // Mint mints new non-fungible token in the class.
  rpc Mint(MsgMint) returns (EmptyResponse);
  // UpdateData updates the existing non-fungible token data in the class.
  rpc UpdateData(MsgUpdateData) returns (EmptyResponse);
  // Burn burns the existing non-fungible token in the class.
  rpc Burn(MsgBurn) returns (EmptyResponse);
  // Freeze freezes an NFT
  rpc Freeze(MsgFreeze) returns (EmptyResponse);
  // Unfreeze removes the freeze effect already put on an NFT
  rpc Unfreeze(MsgUnfreeze) returns (EmptyResponse);
  // AddToWhitelist sets the account as whitelisted to hold the NFT
  rpc AddToWhitelist(MsgAddToWhitelist) returns (EmptyResponse);
  // RemoveFromWhitelist removes an account from whitelisted list of the NFT
  rpc RemoveFromWhitelist(MsgRemoveFromWhitelist) returns (EmptyResponse);
  // AddToClassWhitelist adds account as whitelist for all the NFTs in the class
  // NOTE: class whitelist does not affect the individual nft whitelisting.
  rpc AddToClassWhitelist(MsgAddToClassWhitelist) returns (EmptyResponse);
  // RemoveFromClassWhitelist removes account as whitelist for the entire class
  // NOTE:
  // class whitelist does not affect the individual nft whitelisting.
  // ie. if specific whitelist is granted for an NFT, that whitelist will
  // still be valid, ater we add and remove it from the class whitelist.
  rpc RemoveFromClassWhitelist(MsgRemoveFromClassWhitelist) returns (EmptyResponse);
  // ClassFreeze freezes all NFTs of a class held by an account.
  rpc ClassFreeze(MsgClassFreeze) returns (EmptyResponse);
  // ClassUnfreeze removes class-freeze on an account for an NFT class.
  // NOTE:
  // class unfreeze does not affect the individual nft freeze.
  rpc ClassUnfreeze(MsgClassUnfreeze) returns (EmptyResponse);
  // UpdateParams is a governance operation that sets the parameters of the module.
  // NOTE: all parameters must be provided.
  rpc UpdateParams(MsgUpdateParams) returns (EmptyResponse);
}

// MsgIssueClass defines message for the IssueClass method.
message MsgIssueClass {
  option (cosmos.msg.v1.signer) = "issuer";
  option (amino.name) = "assetnft/MsgIssueClass";

  string issuer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string symbol = 2;
  string name = 3;
  string description = 4;
  string uri = 5 [(gogoproto.customname) = "URI"];
  string uri_hash = 6 [(gogoproto.customname) = "URIHash"];
  google.protobuf.Any data = 7;
  repeated ClassFeature features = 8;
  string royalty_rate = 9 [
    (gogoproto.nullable) = false,
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec"
  ];
}

// MsgMint defines message for the Mint method.
message MsgMint {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "assetnft/MsgMint";

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string class_id = 2 [(gogoproto.customname) = "ClassID"];
  string id = 3 [(gogoproto.customname) = "ID"];
  string uri = 4 [(gogoproto.customname) = "URI"];
  string uri_hash = 5 [(gogoproto.customname) = "URIHash"];
  // Data can be DataBytes or DataDynamic.
  google.protobuf.Any data = 6;
  string recipient = 7;
}

// MsgUpdateData defines message to update the dynamic data.
message MsgUpdateData {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "assetnft/MsgUpdateData";

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string class_id = 2 [(gogoproto.customname) = "ClassID"];
  string id = 3 [(gogoproto.customname) = "ID"];
  repeated DataDynamicIndexedItem items = 4 [(gogoproto.nullable) = false];
}

// MsgBurn defines message for the Burn method.
message MsgBurn {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "assetnft/MsgBurn";

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string class_id = 2 [(gogoproto.customname) = "ClassID"];
  string id = 3 [(gogoproto.customname) = "ID"];
}

message MsgFreeze {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "assetnft/MsgFreeze";

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string class_id = 2 [(gogoproto.customname) = "ClassID"];
  string id = 3 [(gogoproto.customname) = "ID"];
}

message MsgUnfreeze {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "assetnft/MsgUnfreeze";

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string class_id = 2 [(gogoproto.customname) = "ClassID"];
  string id = 3 [(gogoproto.customname) = "ID"];
}

message MsgClassFreeze {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "assetnft/MsgClassFreeze";

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string class_id = 2 [(gogoproto.customname) = "ClassID"];
  string account = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgClassUnfreeze {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "assetnft/MsgClassUnfreeze";

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string class_id = 2 [(gogoproto.customname) = "ClassID"];
  string account = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgAddToWhitelist {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "assetnft/MsgAddToWhitelist";

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string class_id = 2 [(gogoproto.customname) = "ClassID"];
  string id = 3 [(gogoproto.customname) = "ID"];
  string account = 4;
}

message MsgRemoveFromWhitelist {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "assetnft/MsgRemoveFromWhitelist";

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string class_id = 2 [(gogoproto.customname) = "ClassID"];
  string id = 3 [(gogoproto.customname) = "ID"];
  string account = 4;
}

message MsgAddToClassWhitelist {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "assetnft/MsgAddToClassWhitelist";

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string class_id = 2 [(gogoproto.customname) = "ClassID"];
  string account = 3;
}

message MsgRemoveFromClassWhitelist {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "assetnft/MsgRemoveFromClassWhitelist";

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string class_id = 2 [(gogoproto.customname) = "ClassID"];
  string account = 3;
}

message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "assetnft/MsgUpdateParams";

  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  Params params = 2 [(gogoproto.nullable) = false];
}

message EmptyResponse {}
