syntax = "proto3";
package coreum.asset.v1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "coreum/asset/v1/asset.proto";

option go_package = "github.com/CoreumFoundation/coreum/x/asset/types";

// Msg defines the Msg service.
service Msg {
  // IssueFungibleToken defines a method to issue a new fungible token.
  rpc IssueFungibleToken(MsgIssueFungibleToken) returns (MsgIssueFungibleTokenResponse);
  // FreezeFungibleToken freezes a part of the fungible tokens in an 
  // account, only if the freezable feature is enabled on that token.
  rpc FreezeFungibleToken(MsgFreezeFungibleToken) returns (MsgFreezeFungibleTokenResponse);
  // UnfreezeFungibleToken unfreezes a part of the frozen fungible tokens in an 
  // account, only if there are such frozen tokens on that account 
  rpc UnfreezeFungibleToken(MsgUnfreezeFungibleToken) returns (MsgUnfreezeFungibleTokenResponse);
}

// MsgIssueFungibleToken defines message to issue new fungible token.
message MsgIssueFungibleToken {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  string issuer = 1;
  string symbol = 2;
  string recipient = 3;
  string initial_amount = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string description = 5;
  repeated FungibleTokenFeature features = 6;
}

// MsgIssueFungibleTokenResponse defines message response for the IssueFungibleToken.
message MsgIssueFungibleTokenResponse {}

message MsgFreezeFungibleToken {
  string issuer = 1;
  string account = 2;
  cosmos.base.v1beta1.Coin coin = 3 [(gogoproto.nullable) = false];
}

message MsgFreezeFungibleTokenResponse {}

message MsgUnfreezeFungibleToken {
  string issuer = 1;
  string account = 2;
  cosmos.base.v1beta1.Coin coin = 3 [(gogoproto.nullable) = false];
}

message MsgUnfreezeFungibleTokenResponse {}

// MsgWhitelistFungibleToken whitelists listed accounts so they are able to receive the token.
// List of accounts might be provided to to optimize the number of transactions, the list should be limited in size.
// After executing this transaction, key for denom-account combination is added to the store.
message MsgWhitelistFungibleToken {
  string issuer = 1;
  string denom = 2;
  repeated string accounts = 3;
}

message MsgWhitelistFungibleTokenResponse {}

// MsgUnwhitelistFungibleToken unwhitelists listed accounts so they are not able to receive the token anymore. They may still
// transfer tokens they own.
// List of accounts might be provided to to optimize the number of transactions, the list should be limited in size.
// After executing this transaction, key for denom-account combination (the one added by MsgWhitelistFungibleToken transaction) is removed from the store.
message MsgUnwhitelistFungibleToken {
  string issuer = 1;
  string denom = 2;
  repeated string accounts = 3;
}

message MsgUnwhitelistFungibleTokenResponse {}

// MsgSetWhitelistAllFungibleToken is a mechanism allowing to whitelist everyone without adding all the accounts separately.
// By executing this transaction "global" flag is set on token saying that everyone may receive it.
message MsgSetWhitelistAllFungibleToken {
  string issuer = 1;
  string denom = 2;
}

message MsgSetWhitelistAllFungibleTokenResponse {}

// MsgUnsetWhitelistAllFungibleToken unsets global whitelist flag meaning that now only accounts whitelisted explicitly may receive the token.
// Important information: Neither MsgSetWhitelistAllFungibleToken nor MsgUnsetWhitelistAllFungibleToken affects in any way dictionary of whitelisted accounts managed by
// MsgWhitelistFungibleToken and MsgUnwhitelistFungibleToken transactions. That list is independent. It means that after executing the series of transactions:
// 1. MsgWhitelistFungibleToken was used to whitelist account A and B
// 2. MsgSetWhitelistAllFungibleToken to whitelist all
// 3. MsgUnsetWhitelistAllFungibleToken to reset global whitelist flag
// accounts A and B are still allowed to receive the token.
// That's why MsgSetWhitelistAllFungibleToken is not named MsgWhitelistAllFungibleToken
// and MsgUnsetWhitelistAllFungibleToken is not named MsgUnwhitelistAllFungibleToken
message MsgUnsetWhitelistAllFungibleToken {
  string issuer = 1;
  string denom = 2;
}

message MsgUnsetWhitelistAllFungibleTokenResponse {}
