syntax = "proto3";
package coreum.asset.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";

import "coreum/asset/v1/asset.proto";

option go_package = "github.com/CoreumFoundation/coreum/x/asset/types";
option (gogoproto.goproto_getters_all) = false;

// Msg defines the Msg service.
service Msg {
  // IssueFungibleToken defines a method to issue a new fungible token.
  rpc IssueFungibleToken(MsgIssueFungibleToken) returns (EmptyResponse);

  // MintFungibleToken mints new fungible tokens
  rpc MintFungibleToken(MsgMintFungibleToken) returns (EmptyResponse);
  // BurnFungibleToken burns the specified fungible tokens from senders balance if the sender has enough balance
  rpc BurnFungibleToken(MsgBurnFungibleToken) returns (EmptyResponse);

  // FreezeFungibleToken freezes a part of the fungible tokens in an
  // account, only if the freezable feature is enabled on that token.
  rpc FreezeFungibleToken(MsgFreezeFungibleToken) returns (EmptyResponse);
  // UnfreezeFungibleToken unfreezes a part of the frozen fungible tokens in an
  // account, only if there are such frozen tokens on that account
  rpc UnfreezeFungibleToken(MsgUnfreezeFungibleToken) returns (EmptyResponse);

  // GloballyFreezeFungibleToken freezes fungible token so no operations are allowed with it before unfrozen.
  // This operation is idempotent so global freeze of already frozen token does nothing.
  rpc GloballyFreezeFungibleToken(MsgGloballyFreezeFungibleToken) returns (EmptyResponse);
  // GloballyUnfreezeFungibleToken unfreezes fungible token and unblocks basic operations on it.
  // This operation is idempotent so global unfreezing of non-frozen token does nothing.
  rpc GloballyUnfreezeFungibleToken(MsgGloballyUnfreezeFungibleToken) returns (EmptyResponse);

  // SetWhitelistedLimitFungibleToken sets the limit of how many tokens account may hold
  rpc SetWhitelistedLimitFungibleToken(MsgSetWhitelistedLimitFungibleToken) returns (EmptyResponse);

  // IssueNonFungibleTokenClass creates new non-fungible token class.
  rpc IssueNonFungibleTokenClass(MsgIssueNonFungibleTokenClass) returns (EmptyResponse);
  // MintNonFungibleToken mints new non-fungible token in the class.
  rpc MintNonFungibleToken(MsgMintNonFungibleToken) returns (EmptyResponse);
}

// MsgIssueFungibleToken defines message to issue new fungible token.
message MsgIssueFungibleToken {
  string issuer = 1;
  string symbol = 2;
  string subunit = 3;
  uint32 precision = 4;
  string initial_amount = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string description = 6;
  repeated FungibleTokenFeature features = 7;
  // burn_rate is a number between 0 and 1 which will be multiplied by send amount to determine
  // burn_amount. This value will be burnt on top of the send amount.
  string burn_rate = 8 [
    (gogoproto.nullable) = false,
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"
  ];
}

message MsgFreezeFungibleToken {
  string sender = 1;
  string account = 2;
  cosmos.base.v1beta1.Coin coin = 3 [(gogoproto.nullable) = false];
}

message MsgUnfreezeFungibleToken {
  string sender = 1;
  string account = 2;
  cosmos.base.v1beta1.Coin coin = 3 [(gogoproto.nullable) = false];
}

message MsgMintFungibleToken {
  string sender = 1;
  cosmos.base.v1beta1.Coin coin = 2 [(gogoproto.nullable) = false];
}

message MsgBurnFungibleToken {
  string sender = 1;
  cosmos.base.v1beta1.Coin coin = 3 [(gogoproto.nullable) = false];
}

message MsgGloballyFreezeFungibleToken {
  string sender = 1;
  string denom = 2;
}

message MsgGloballyUnfreezeFungibleToken {
  string sender = 1;
  string denom = 2;
}

message MsgSetWhitelistedLimitFungibleToken {
  string sender = 1;
  string account = 2;
  cosmos.base.v1beta1.Coin coin = 3 [(gogoproto.nullable) = false];
}

// MsgIssueNonFungibleTokenClass defines message for the IssueNonFungibleTokenClass method.
message MsgIssueNonFungibleTokenClass {
  string issuer = 1;
  string symbol = 2;
  string name = 3;
  string description = 4;
  string uri = 5 [(gogoproto.customname) = "URI"];
  string uri_hash = 6 [(gogoproto.customname) = "URIHash"];
  google.protobuf.Any data = 7;
}

// MsgMintNonFungibleToken defines message for the MintNonFungibleToken method.
message MsgMintNonFungibleToken {
  string sender = 1;
  string class_id = 2 [(gogoproto.customname) = "ClassID"];
  string id = 3 [(gogoproto.customname) = "ID"];
  string uri = 4 [(gogoproto.customname) = "URI"];
  string uri_hash = 5 [(gogoproto.customname) = "URIHash"];
  google.protobuf.Any data = 6;
}

message EmptyResponse {}
