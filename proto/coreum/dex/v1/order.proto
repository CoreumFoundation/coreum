syntax = "proto3";
package coreum.dex.v1;

import "gogoproto/gogo.proto";

option go_package = "github.com/CoreumFoundation/coreum/v4/x/dex/types";
option (gogoproto.goproto_getters_all) = false;

// Side is order side.
enum Side {
  // unspecified reserves the default value, to protect against unexpected settings.
  unspecified = 0;
  // sell means that the order is to sell base_denom quantity with the price.
  sell = 1;
  // buy means that the order is to buy base_denom quantity with the price.
  buy = 2;
}

// Order is a DEX order.
message Order {
  // account is order creator address.
  string account = 1;
  // id is unique order ID.
  string id = 2 [(gogoproto.customname) = "ID"];
  // base_denom is base order denom.
  string base_denom = 3;
  // quote_denom is quote order denom
  string quote_denom = 4;
  // price is value of one unit of the base_denom expressed in terms of the quote_denom.
  string price = 5 [
    (gogoproto.customtype) = "Price",
    (gogoproto.nullable) = false
  ];
  // quantity is amount of the base base_denom being traded.
  string quantity = 6 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  // side is order side.
  Side side = 7;
}

// OrderData is a order data used for the store.
message OrderData {
  // order_book_id is order book ID.
  uint32 order_book_id = 1 [(gogoproto.customname) = "OrderBookID"];
  // price is value of one unit of the base_denom expressed in terms of the quote_denom.
  string price = 2 [
    (gogoproto.customtype) = "Price",
    (gogoproto.nullable) = false
  ];
  // quantity is amount of the base base_denom being traded.
  string quantity = 3 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  // side is order side.
  Side side = 4;
}

// OrderBookData is a order book data used by order for the store.
message OrderBookData {
  // base_denom is base order book denom.
  string base_denom = 1;
  // quote_denom is quote order book denom
  string quote_denom = 2;
}

// OrderBookRecord is a single order book record.
message OrderBookRecord {
  // order_book_id is order book ID.
  uint32 order_book_id = 1 [(gogoproto.customname) = "OrderBookID"];
  // side is order side.
  Side side = 2;
  // price is order book record price.
  string price = 3 [
    (gogoproto.customtype) = "Price",
    (gogoproto.nullable) = false
  ];
  // order_seq is order sequence.
  uint64 order_seq = 4;
  // order ID provided by the account.
  string order_id = 5 [(gogoproto.customname) = "OrderID"];
  // account_number is account number which corresponds the order creator.
  uint64 account_number = 6;
  // remaining_quantity is remaining filling quantity sell/buy.
  string remaining_quantity = 7 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  // remaining_balance is remaining order balance.
  string remaining_balance = 8 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

// OrderBookRecordData is a single order book record used for the store.
message OrderBookRecordData {
  // order ID provided by the account.
  string order_id = 1 [(gogoproto.customname) = "OrderID"];
  // account_number is account number which corresponds the order creator.
  uint64 account_number = 2;
  // remaining_quantity is remaining filling quantity sell/buy.
  string remaining_quantity = 3 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  // remaining_balance is remaining order balance.
  string remaining_balance = 4 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}
