// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: coreum/asset/ft/v1/upgradev3.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgEnableIBCRequest means that sender wants to enable IBC for the token.
type MsgEnableIBCRequest struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Denom  string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *MsgEnableIBCRequest) Reset()         { *m = MsgEnableIBCRequest{} }
func (m *MsgEnableIBCRequest) String() string { return proto.CompactTextString(m) }
func (*MsgEnableIBCRequest) ProtoMessage()    {}
func (*MsgEnableIBCRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e75f24515d70be88, []int{0}
}
func (m *MsgEnableIBCRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEnableIBCRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEnableIBCRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEnableIBCRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEnableIBCRequest.Merge(m, src)
}
func (m *MsgEnableIBCRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgEnableIBCRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEnableIBCRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEnableIBCRequest proto.InternalMessageInfo

// MsgEnableIBCExecutor is executed by the delay module when it's time to enable IBC.
type MsgEnableIBCExecutor struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *MsgEnableIBCExecutor) Reset()         { *m = MsgEnableIBCExecutor{} }
func (m *MsgEnableIBCExecutor) String() string { return proto.CompactTextString(m) }
func (*MsgEnableIBCExecutor) ProtoMessage()    {}
func (*MsgEnableIBCExecutor) Descriptor() ([]byte, []int) {
	return fileDescriptor_e75f24515d70be88, []int{1}
}
func (m *MsgEnableIBCExecutor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEnableIBCExecutor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEnableIBCExecutor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEnableIBCExecutor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEnableIBCExecutor.Merge(m, src)
}
func (m *MsgEnableIBCExecutor) XXX_Size() int {
	return m.Size()
}
func (m *MsgEnableIBCExecutor) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEnableIBCExecutor.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEnableIBCExecutor proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgEnableIBCRequest)(nil), "coreum.asset.ft.v1.MsgEnableIBCRequest")
	proto.RegisterType((*MsgEnableIBCExecutor)(nil), "coreum.asset.ft.v1.MsgEnableIBCExecutor")
}

func init() {
	proto.RegisterFile("coreum/asset/ft/v1/upgradev3.proto", fileDescriptor_e75f24515d70be88)
}

var fileDescriptor_e75f24515d70be88 = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8f, 0xbd, 0x4a, 0xc4, 0x40,
	0x10, 0x80, 0xb3, 0x82, 0x07, 0x6e, 0x19, 0x83, 0x1c, 0x16, 0x8b, 0xa4, 0xb2, 0x90, 0x5d, 0x8e,
	0xbc, 0xc1, 0x85, 0x13, 0x2c, 0x2c, 0xbc, 0xd2, 0x2e, 0x3f, 0x73, 0xeb, 0x81, 0xd9, 0x89, 0xbb,
	0xb3, 0xe1, 0x7c, 0x0b, 0x1f, 0xeb, 0xca, 0x2b, 0x2d, 0x35, 0x79, 0x11, 0x71, 0x13, 0xb8, 0x74,
	0xf3, 0xcd, 0x7c, 0x0c, 0x7c, 0x3c, 0xad, 0xd0, 0x82, 0x6f, 0x54, 0xe1, 0x1c, 0x90, 0xda, 0x91,
	0xea, 0x56, 0xca, 0xb7, 0xda, 0x16, 0x35, 0x74, 0x99, 0x6c, 0x2d, 0x12, 0xc6, 0xf1, 0xe8, 0xc8,
	0xe0, 0xc8, 0x1d, 0xc9, 0x6e, 0x75, 0x9b, 0x68, 0xd4, 0x18, 0xce, 0xea, 0x7f, 0x1a, 0xcd, 0x34,
	0xe7, 0xd7, 0xcf, 0x4e, 0x6f, 0x4c, 0x51, 0xbe, 0xc3, 0xd3, 0x3a, 0xdf, 0xc2, 0x87, 0x07, 0x47,
	0xf1, 0x0d, 0x5f, 0x38, 0x30, 0x35, 0xd8, 0x25, 0xbb, 0x63, 0xf7, 0x57, 0xdb, 0x89, 0xe2, 0x84,
	0x5f, 0xd6, 0x60, 0xb0, 0x59, 0x5e, 0x84, 0xf5, 0x08, 0xe9, 0x03, 0x4f, 0xe6, 0x4f, 0x36, 0x07,
	0xa8, 0x3c, 0xe1, 0xcc, 0x66, 0x33, 0x7b, 0xfd, 0x72, 0xfc, 0x15, 0xd1, 0xb1, 0x17, 0xec, 0xd4,
	0x0b, 0xf6, 0xd3, 0x0b, 0xf6, 0x35, 0x88, 0xe8, 0x34, 0x88, 0xe8, 0x7b, 0x10, 0xd1, 0x6b, 0xa6,
	0xf7, 0xf4, 0xe6, 0x4b, 0x59, 0x61, 0xa3, 0xf2, 0x50, 0xf1, 0x88, 0xde, 0xd4, 0x05, 0xed, 0xd1,
	0xa8, 0x29, 0xfd, 0x70, 0x8e, 0xa7, 0xcf, 0x16, 0x5c, 0xb9, 0x08, 0x31, 0xd9, 0x5f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xea, 0x62, 0x64, 0x6e, 0x1c, 0x01, 0x00, 0x00,
}

func (m *MsgEnableIBCRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEnableIBCRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEnableIBCRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintUpgradev3(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintUpgradev3(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEnableIBCExecutor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEnableIBCExecutor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEnableIBCExecutor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintUpgradev3(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintUpgradev3(dAtA []byte, offset int, v uint64) int {
	offset -= sovUpgradev3(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgEnableIBCRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovUpgradev3(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovUpgradev3(uint64(l))
	}
	return n
}

func (m *MsgEnableIBCExecutor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovUpgradev3(uint64(l))
	}
	return n
}

func sovUpgradev3(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUpgradev3(x uint64) (n int) {
	return sovUpgradev3(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgEnableIBCRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpgradev3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEnableIBCRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEnableIBCRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgradev3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpgradev3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpgradev3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgradev3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpgradev3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpgradev3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpgradev3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUpgradev3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEnableIBCExecutor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpgradev3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEnableIBCExecutor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEnableIBCExecutor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgradev3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpgradev3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpgradev3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpgradev3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUpgradev3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUpgradev3(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUpgradev3
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUpgradev3
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUpgradev3
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUpgradev3
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUpgradev3
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUpgradev3
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUpgradev3        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUpgradev3          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUpgradev3 = fmt.Errorf("proto: unexpected end of group")
)
