// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: coreum/asset/ft/v1/genesis.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the module genesis state.
type GenesisState struct {
	// params defines all the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// tokens keep the fungible token state
	Tokens []Token `protobuf:"bytes,2,rep,name=tokens,proto3" json:"tokens"`
	// frozen_balances contains the frozen balances on all of the accounts
	FrozenBalances []Balance `protobuf:"bytes,3,rep,name=frozen_balances,json=frozenBalances,proto3" json:"frozen_balances"`
	// whitelisted_balances contains the whitelisted balances on all of the accounts
	WhitelistedBalances []Balance `protobuf:"bytes,4,rep,name=whitelisted_balances,json=whitelistedBalances,proto3" json:"whitelisted_balances"`
	// pending_token_upgrades contains pending token upgrades.
	PendingTokenUpgrades []PendingTokenUpgrade `protobuf:"bytes,5,rep,name=pending_token_upgrades,json=pendingTokenUpgrades,proto3" json:"pending_token_upgrades"`
	// dex_locked_balances contains the DEX locked balances on all of the accounts
	DEXLockedBalances            []Balance              `protobuf:"bytes,6,rep,name=dex_locked_balances,json=dexLockedBalances,proto3" json:"dex_locked_balances"`
	DEXExpectedToReceiveBalances []Balance              `protobuf:"bytes,7,rep,name=dex_expected_to_receive_balances,json=dexExpectedToReceiveBalances,proto3" json:"dex_expected_to_receive_balances"`
	DEXSettings                  []DEXSettingsWithDenom `protobuf:"bytes,8,rep,name=dex_settings,json=dexSettings,proto3" json:"dex_settings"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_d281657d6c91cb92, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetTokens() []Token {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *GenesisState) GetFrozenBalances() []Balance {
	if m != nil {
		return m.FrozenBalances
	}
	return nil
}

func (m *GenesisState) GetWhitelistedBalances() []Balance {
	if m != nil {
		return m.WhitelistedBalances
	}
	return nil
}

func (m *GenesisState) GetPendingTokenUpgrades() []PendingTokenUpgrade {
	if m != nil {
		return m.PendingTokenUpgrades
	}
	return nil
}

func (m *GenesisState) GetDEXLockedBalances() []Balance {
	if m != nil {
		return m.DEXLockedBalances
	}
	return nil
}

func (m *GenesisState) GetDEXExpectedToReceiveBalances() []Balance {
	if m != nil {
		return m.DEXExpectedToReceiveBalances
	}
	return nil
}

func (m *GenesisState) GetDEXSettings() []DEXSettingsWithDenom {
	if m != nil {
		return m.DEXSettings
	}
	return nil
}

// Balance defines an account address and balance pair used module genesis genesis state.
type Balance struct {
	// address is the address of the balance holder.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// coins defines the different coins this balance holds.
	Coins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
}

func (m *Balance) Reset()         { *m = Balance{} }
func (m *Balance) String() string { return proto.CompactTextString(m) }
func (*Balance) ProtoMessage()    {}
func (*Balance) Descriptor() ([]byte, []int) {
	return fileDescriptor_d281657d6c91cb92, []int{1}
}
func (m *Balance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Balance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Balance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Balance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Balance.Merge(m, src)
}
func (m *Balance) XXX_Size() int {
	return m.Size()
}
func (m *Balance) XXX_DiscardUnknown() {
	xxx_messageInfo_Balance.DiscardUnknown(m)
}

var xxx_messageInfo_Balance proto.InternalMessageInfo

func (m *Balance) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Balance) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

// PendingTokenUpgrade stores the version of pending token upgrade.
type PendingTokenUpgrade struct {
	Denom   string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Version uint32 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *PendingTokenUpgrade) Reset()         { *m = PendingTokenUpgrade{} }
func (m *PendingTokenUpgrade) String() string { return proto.CompactTextString(m) }
func (*PendingTokenUpgrade) ProtoMessage()    {}
func (*PendingTokenUpgrade) Descriptor() ([]byte, []int) {
	return fileDescriptor_d281657d6c91cb92, []int{2}
}
func (m *PendingTokenUpgrade) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingTokenUpgrade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingTokenUpgrade.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingTokenUpgrade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingTokenUpgrade.Merge(m, src)
}
func (m *PendingTokenUpgrade) XXX_Size() int {
	return m.Size()
}
func (m *PendingTokenUpgrade) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingTokenUpgrade.DiscardUnknown(m)
}

var xxx_messageInfo_PendingTokenUpgrade proto.InternalMessageInfo

func (m *PendingTokenUpgrade) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *PendingTokenUpgrade) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type DEXSettingsWithDenom struct {
	Denom       string      `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	DEXSettings DEXSettings `protobuf:"bytes,2,opt,name=dex_settings,json=dexSettings,proto3" json:"dex_settings"`
}

func (m *DEXSettingsWithDenom) Reset()         { *m = DEXSettingsWithDenom{} }
func (m *DEXSettingsWithDenom) String() string { return proto.CompactTextString(m) }
func (*DEXSettingsWithDenom) ProtoMessage()    {}
func (*DEXSettingsWithDenom) Descriptor() ([]byte, []int) {
	return fileDescriptor_d281657d6c91cb92, []int{3}
}
func (m *DEXSettingsWithDenom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DEXSettingsWithDenom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DEXSettingsWithDenom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DEXSettingsWithDenom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DEXSettingsWithDenom.Merge(m, src)
}
func (m *DEXSettingsWithDenom) XXX_Size() int {
	return m.Size()
}
func (m *DEXSettingsWithDenom) XXX_DiscardUnknown() {
	xxx_messageInfo_DEXSettingsWithDenom.DiscardUnknown(m)
}

var xxx_messageInfo_DEXSettingsWithDenom proto.InternalMessageInfo

func (m *DEXSettingsWithDenom) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *DEXSettingsWithDenom) GetDEXSettings() DEXSettings {
	if m != nil {
		return m.DEXSettings
	}
	return DEXSettings{}
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "coreum.asset.ft.v1.GenesisState")
	proto.RegisterType((*Balance)(nil), "coreum.asset.ft.v1.Balance")
	proto.RegisterType((*PendingTokenUpgrade)(nil), "coreum.asset.ft.v1.PendingTokenUpgrade")
	proto.RegisterType((*DEXSettingsWithDenom)(nil), "coreum.asset.ft.v1.DEXSettingsWithDenom")
}

func init() { proto.RegisterFile("coreum/asset/ft/v1/genesis.proto", fileDescriptor_d281657d6c91cb92) }

var fileDescriptor_d281657d6c91cb92 = []byte{
	// 612 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4f, 0x6f, 0xd3, 0x30,
	0x14, 0x6f, 0xb6, 0xb5, 0x03, 0x77, 0x80, 0x96, 0x56, 0x28, 0x1b, 0x53, 0x5a, 0x55, 0x48, 0xf4,
	0x42, 0x42, 0x87, 0xf8, 0x73, 0xee, 0x5a, 0x90, 0x10, 0x87, 0x29, 0x1b, 0xda, 0xc4, 0xa5, 0xa4,
	0xf1, 0x6b, 0x66, 0x6d, 0xb5, 0xa3, 0xd8, 0x2d, 0x85, 0x3b, 0x48, 0xdc, 0xf8, 0x1c, 0x7c, 0x92,
	0x1d, 0x77, 0xe4, 0x34, 0x50, 0xfb, 0x45, 0x90, 0xff, 0x64, 0x2d, 0x2c, 0x53, 0x39, 0x25, 0xf6,
	0xfb, 0xfd, 0xf3, 0x93, 0x9f, 0x51, 0x3d, 0x62, 0x29, 0x8c, 0x86, 0x7e, 0xc8, 0x39, 0x08, 0x7f,
	0x20, 0xfc, 0x71, 0xcb, 0x8f, 0x81, 0x02, 0x27, 0xdc, 0x4b, 0x52, 0x26, 0x98, 0x6d, 0x6b, 0x84,
	0xa7, 0x10, 0xde, 0x40, 0x78, 0xe3, 0xd6, 0x76, 0x2d, 0x87, 0x95, 0x84, 0x69, 0x38, 0x34, 0xa4,
	0x6d, 0x37, 0x07, 0x20, 0xd8, 0x29, 0xd0, 0x79, 0x9d, 0x0f, 0x19, 0xf7, 0xfb, 0x21, 0x07, 0x7f,
	0xdc, 0xea, 0x83, 0x08, 0x5b, 0x7e, 0xc4, 0x48, 0x56, 0xaf, 0xc6, 0x2c, 0x66, 0xea, 0xd7, 0x97,
	0x7f, 0x7a, 0xb7, 0x71, 0x59, 0x44, 0x1b, 0xaf, 0x75, 0xb8, 0x03, 0x11, 0x0a, 0xb0, 0x5f, 0xa2,
	0x92, 0xb6, 0x75, 0xac, 0xba, 0xd5, 0x2c, 0xef, 0x6e, 0x7b, 0xd7, 0xc3, 0x7a, 0xfb, 0x0a, 0xd1,
	0x5e, 0x3b, 0xbf, 0xac, 0x15, 0x02, 0x83, 0xb7, 0x5f, 0xa0, 0x92, 0xca, 0xc3, 0x9d, 0x95, 0xfa,
	0x6a, 0xb3, 0xbc, 0xbb, 0x95, 0xc7, 0x3c, 0x94, 0x88, 0x8c, 0xa8, 0xe1, 0xf6, 0x1b, 0x74, 0x6f,
	0x90, 0xb2, 0xcf, 0x40, 0x7b, 0xfd, 0xf0, 0x2c, 0xa4, 0x11, 0x70, 0x67, 0x55, 0x29, 0x3c, 0xc8,
	0x53, 0x68, 0x6b, 0x8c, 0xd1, 0xb8, 0xab, 0x99, 0x66, 0x93, 0xdb, 0x87, 0xa8, 0xfa, 0xf1, 0x84,
	0x08, 0x38, 0x23, 0x5c, 0x00, 0x9e, 0x0b, 0xae, 0xfd, 0xaf, 0x60, 0x65, 0x81, 0x7e, 0xa5, 0x1a,
	0xa1, 0xfb, 0x09, 0x50, 0x4c, 0x68, 0xdc, 0x53, 0x99, 0x7b, 0xa3, 0x24, 0x4e, 0x43, 0x0c, 0xdc,
	0x29, 0x2a, 0xdd, 0x47, 0xb9, 0x4d, 0xd2, 0x0c, 0x75, 0xe2, 0x77, 0x1a, 0x6f, 0x3c, 0xaa, 0xc9,
	0xf5, 0x12, 0xb7, 0x07, 0xa8, 0x82, 0x61, 0xd2, 0x3b, 0x63, 0xd1, 0xe9, 0x62, 0xf2, 0xd2, 0xf2,
	0xe4, 0x5b, 0x52, 0x75, 0x7a, 0x59, 0xdb, 0xec, 0x74, 0x8f, 0xdf, 0x2a, 0x7a, 0x96, 0x3c, 0xd8,
	0xc4, 0x30, 0xf9, 0x7b, 0xcb, 0xfe, 0x66, 0xa1, 0xba, 0x34, 0x82, 0x49, 0x02, 0x91, 0x6c, 0x92,
	0x60, 0xbd, 0x14, 0x22, 0x20, 0x63, 0x98, 0xbb, 0xae, 0x2f, 0x77, 0x7d, 0x68, 0x5c, 0x77, 0x3a,
	0xdd, 0xe3, 0xae, 0xd1, 0x3a, 0x64, 0x81, 0x56, 0xba, 0x0a, 0xb0, 0x83, 0x61, 0x72, 0x63, 0xd5,
	0xfe, 0x80, 0x36, 0x64, 0x14, 0x0e, 0x42, 0x10, 0x1a, 0x73, 0xe7, 0x96, 0xb2, 0x6d, 0xe6, 0xd9,
	0x76, 0xba, 0xc7, 0x07, 0x06, 0x76, 0x44, 0xc4, 0x49, 0x07, 0x28, 0x1b, 0xb6, 0x2b, 0x26, 0x43,
	0x79, 0xa1, 0x1a, 0x94, 0x31, 0x4c, 0xb2, 0x45, 0xe3, 0xab, 0x85, 0xd6, 0x8d, 0x9d, 0xed, 0xa0,
	0xf5, 0x10, 0xe3, 0x14, 0xb8, 0xbe, 0xdc, 0xb7, 0x83, 0x6c, 0x69, 0x87, 0xa8, 0x28, 0x47, 0x65,
	0xf1, 0xea, 0xca, 0x61, 0xf2, 0xe4, 0x30, 0x79, 0x66, 0x98, 0xbc, 0x3d, 0x46, 0x68, 0xfb, 0x89,
	0x74, 0xfc, 0xf1, 0xab, 0xd6, 0x8c, 0x89, 0x38, 0x19, 0xf5, 0xbd, 0x88, 0x0d, 0x7d, 0x33, 0x79,
	0xfa, 0xf3, 0x98, 0xe3, 0x53, 0x5f, 0x7c, 0x4a, 0x80, 0x2b, 0x02, 0x0f, 0xb4, 0x72, 0xa3, 0x8b,
	0x2a, 0x39, 0x37, 0xc2, 0xae, 0xa2, 0x22, 0x96, 0x47, 0x31, 0x89, 0xf4, 0x42, 0x26, 0x1d, 0x43,
	0xca, 0x09, 0xa3, 0xce, 0x4a, 0xdd, 0x6a, 0xde, 0x09, 0xb2, 0x65, 0xe3, 0x8b, 0x85, 0xaa, 0x79,
	0xad, 0xb8, 0x41, 0xe8, 0xe8, 0x9f, 0x06, 0xaf, 0xa8, 0xa1, 0xae, 0x2d, 0x69, 0xf0, 0xf2, 0xbe,
	0xb6, 0xf7, 0xcf, 0xa7, 0xae, 0x75, 0x31, 0x75, 0xad, 0xdf, 0x53, 0xd7, 0xfa, 0x3e, 0x73, 0x0b,
	0x17, 0x33, 0xb7, 0xf0, 0x73, 0xe6, 0x16, 0xde, 0x3f, 0x5f, 0xe8, 0xcc, 0x9e, 0xb2, 0x79, 0xc5,
	0x46, 0x14, 0x87, 0x82, 0x30, 0xea, 0x9b, 0x47, 0x6c, 0xfc, 0xcc, 0x9f, 0xcc, 0x5f, 0x32, 0xd5,
	0xad, 0x7e, 0x49, 0xbd, 0x48, 0x4f, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x03, 0x69, 0x3c, 0x0d,
	0x40, 0x05, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DEXSettings) > 0 {
		for iNdEx := len(m.DEXSettings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DEXSettings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.DEXExpectedToReceiveBalances) > 0 {
		for iNdEx := len(m.DEXExpectedToReceiveBalances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DEXExpectedToReceiveBalances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.DEXLockedBalances) > 0 {
		for iNdEx := len(m.DEXLockedBalances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DEXLockedBalances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.PendingTokenUpgrades) > 0 {
		for iNdEx := len(m.PendingTokenUpgrades) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingTokenUpgrades[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.WhitelistedBalances) > 0 {
		for iNdEx := len(m.WhitelistedBalances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WhitelistedBalances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.FrozenBalances) > 0 {
		for iNdEx := len(m.FrozenBalances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FrozenBalances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Balance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Balance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Balance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PendingTokenUpgrade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingTokenUpgrade) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingTokenUpgrade) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DEXSettingsWithDenom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DEXSettingsWithDenom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DEXSettingsWithDenom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DEXSettings.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.FrozenBalances) > 0 {
		for _, e := range m.FrozenBalances {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.WhitelistedBalances) > 0 {
		for _, e := range m.WhitelistedBalances {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.PendingTokenUpgrades) > 0 {
		for _, e := range m.PendingTokenUpgrades {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.DEXLockedBalances) > 0 {
		for _, e := range m.DEXLockedBalances {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.DEXExpectedToReceiveBalances) > 0 {
		for _, e := range m.DEXExpectedToReceiveBalances {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.DEXSettings) > 0 {
		for _, e := range m.DEXSettings {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *Balance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *PendingTokenUpgrade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovGenesis(uint64(m.Version))
	}
	return n
}

func (m *DEXSettingsWithDenom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.DEXSettings.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, Token{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrozenBalances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrozenBalances = append(m.FrozenBalances, Balance{})
			if err := m.FrozenBalances[len(m.FrozenBalances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistedBalances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhitelistedBalances = append(m.WhitelistedBalances, Balance{})
			if err := m.WhitelistedBalances[len(m.WhitelistedBalances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingTokenUpgrades", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingTokenUpgrades = append(m.PendingTokenUpgrades, PendingTokenUpgrade{})
			if err := m.PendingTokenUpgrades[len(m.PendingTokenUpgrades)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DEXLockedBalances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DEXLockedBalances = append(m.DEXLockedBalances, Balance{})
			if err := m.DEXLockedBalances[len(m.DEXLockedBalances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DEXExpectedToReceiveBalances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DEXExpectedToReceiveBalances = append(m.DEXExpectedToReceiveBalances, Balance{})
			if err := m.DEXExpectedToReceiveBalances[len(m.DEXExpectedToReceiveBalances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DEXSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DEXSettings = append(m.DEXSettings, DEXSettingsWithDenom{})
			if err := m.DEXSettings[len(m.DEXSettings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Balance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Balance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Balance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingTokenUpgrade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingTokenUpgrade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingTokenUpgrade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DEXSettingsWithDenom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DEXSettingsWithDenom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DEXSettingsWithDenom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DEXSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DEXSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
