// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: coreum/asset/ft/v1/token.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Feature defines possible features of fungible token.
type Feature int32

const (
	Feature_minting               Feature = 0
	Feature_burning               Feature = 1
	Feature_freezing              Feature = 2
	Feature_whitelisting          Feature = 3
	Feature_ibc                   Feature = 4
	Feature_block_smart_contracts Feature = 5
	Feature_clawback              Feature = 6
	Feature_extension             Feature = 7
	Feature_block_dex             Feature = 8
	Feature_restrict_dex          Feature = 9
)

var Feature_name = map[int32]string{
	0: "minting",
	1: "burning",
	2: "freezing",
	3: "whitelisting",
	4: "ibc",
	5: "block_smart_contracts",
	6: "clawback",
	7: "extension",
	8: "block_dex",
	9: "restrict_dex",
}

var Feature_value = map[string]int32{
	"minting":               0,
	"burning":               1,
	"freezing":              2,
	"whitelisting":          3,
	"ibc":                   4,
	"block_smart_contracts": 5,
	"clawback":              6,
	"extension":             7,
	"block_dex":             8,
	"restrict_dex":          9,
}

func (x Feature) String() string {
	return proto.EnumName(Feature_name, int32(x))
}

func (Feature) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fe80c7a2c55589e7, []int{0}
}

// Definition defines the fungible token settings to store.
type Definition struct {
	Denom    string    `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Issuer   string    `protobuf:"bytes,2,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Features []Feature `protobuf:"varint,3,rep,packed,name=features,proto3,enum=coreum.asset.ft.v1.Feature" json:"features,omitempty"`
	// burn_rate is a number between 0 and 1 which will be multiplied by send amount to determine
	// burn_amount. This value will be burnt on top of the send amount.
	BurnRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=burn_rate,json=burnRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"burn_rate"`
	// send_commission_rate is a number between 0 and 1 which will be multiplied by send amount to determine
	// amount sent to the token admin account.
	SendCommissionRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=send_commission_rate,json=sendCommissionRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"send_commission_rate"`
	Version            uint32                      `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	URI                string                      `protobuf:"bytes,7,opt,name=uri,proto3" json:"uri,omitempty"`
	URIHash            string                      `protobuf:"bytes,8,opt,name=uri_hash,json=uriHash,proto3" json:"uri_hash,omitempty"`
	ExtensionCWAddress string                      `protobuf:"bytes,9,opt,name=extension_cw_address,json=extensionCwAddress,proto3" json:"extension_cw_address,omitempty"`
	Admin              string                      `protobuf:"bytes,10,opt,name=admin,proto3" json:"admin,omitempty"`
}

func (m *Definition) Reset()         { *m = Definition{} }
func (m *Definition) String() string { return proto.CompactTextString(m) }
func (*Definition) ProtoMessage()    {}
func (*Definition) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe80c7a2c55589e7, []int{0}
}
func (m *Definition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Definition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Definition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Definition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Definition.Merge(m, src)
}
func (m *Definition) XXX_Size() int {
	return m.Size()
}
func (m *Definition) XXX_DiscardUnknown() {
	xxx_messageInfo_Definition.DiscardUnknown(m)
}

var xxx_messageInfo_Definition proto.InternalMessageInfo

// Token is a full representation of the fungible token.
type Token struct {
	Denom          string    `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Issuer         string    `protobuf:"bytes,2,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Symbol         string    `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Subunit        string    `protobuf:"bytes,4,opt,name=subunit,proto3" json:"subunit,omitempty"`
	Precision      uint32    `protobuf:"varint,5,opt,name=precision,proto3" json:"precision,omitempty"`
	Description    string    `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	GloballyFrozen bool      `protobuf:"varint,7,opt,name=globally_frozen,json=globallyFrozen,proto3" json:"globally_frozen,omitempty"`
	Features       []Feature `protobuf:"varint,8,rep,packed,name=features,proto3,enum=coreum.asset.ft.v1.Feature" json:"features,omitempty"`
	// burn_rate is a number between 0 and 1 which will be multiplied by send amount to determine
	// burn_amount. This value will be burnt on top of the send amount.
	BurnRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,9,opt,name=burn_rate,json=burnRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"burn_rate"`
	// send_commission_rate is a number between 0 and 1 which will be multiplied by send amount to determine
	// amount sent to the token admin account.
	SendCommissionRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,10,opt,name=send_commission_rate,json=sendCommissionRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"send_commission_rate"`
	Version            uint32                      `protobuf:"varint,11,opt,name=version,proto3" json:"version,omitempty"`
	URI                string                      `protobuf:"bytes,12,opt,name=uri,proto3" json:"uri,omitempty"`
	URIHash            string                      `protobuf:"bytes,13,opt,name=uri_hash,json=uriHash,proto3" json:"uri_hash,omitempty"`
	ExtensionCWAddress string                      `protobuf:"bytes,14,opt,name=extension_cw_address,json=extensionCwAddress,proto3" json:"extension_cw_address,omitempty"`
	Admin              string                      `protobuf:"bytes,15,opt,name=admin,proto3" json:"admin,omitempty"`
	DEXSettings        *DEXSettings                `protobuf:"bytes,16,opt,name=dex_settings,json=dexSettings,proto3" json:"dex_settings,omitempty"`
	DEXRestrictions    *DEXRestrictions            `protobuf:"bytes,17,opt,name=dex_restrictions,json=dexRestrictions,proto3" json:"dex_restrictions,omitempty"`
}

func (m *Token) Reset()         { *m = Token{} }
func (m *Token) String() string { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()    {}
func (*Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe80c7a2c55589e7, []int{1}
}
func (m *Token) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Token.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token.Merge(m, src)
}
func (m *Token) XXX_Size() int {
	return m.Size()
}
func (m *Token) XXX_DiscardUnknown() {
	xxx_messageInfo_Token.DiscardUnknown(m)
}

var xxx_messageInfo_Token proto.InternalMessageInfo

// DelayedTokenUpgradeV1 is executed by the delay module when it's time to enable IBC.
type DelayedTokenUpgradeV1 struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *DelayedTokenUpgradeV1) Reset()         { *m = DelayedTokenUpgradeV1{} }
func (m *DelayedTokenUpgradeV1) String() string { return proto.CompactTextString(m) }
func (*DelayedTokenUpgradeV1) ProtoMessage()    {}
func (*DelayedTokenUpgradeV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe80c7a2c55589e7, []int{2}
}
func (m *DelayedTokenUpgradeV1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelayedTokenUpgradeV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelayedTokenUpgradeV1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelayedTokenUpgradeV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelayedTokenUpgradeV1.Merge(m, src)
}
func (m *DelayedTokenUpgradeV1) XXX_Size() int {
	return m.Size()
}
func (m *DelayedTokenUpgradeV1) XXX_DiscardUnknown() {
	xxx_messageInfo_DelayedTokenUpgradeV1.DiscardUnknown(m)
}

var xxx_messageInfo_DelayedTokenUpgradeV1 proto.InternalMessageInfo

func (m *DelayedTokenUpgradeV1) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// TokenUpgradeV1Status defines the current status of the v1 token migration.
type TokenUpgradeV1Status struct {
	IbcEnabled bool      `protobuf:"varint,1,opt,name=ibc_enabled,json=ibcEnabled,proto3" json:"ibc_enabled,omitempty"`
	StartTime  time.Time `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	EndTime    time.Time `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
}

func (m *TokenUpgradeV1Status) Reset()         { *m = TokenUpgradeV1Status{} }
func (m *TokenUpgradeV1Status) String() string { return proto.CompactTextString(m) }
func (*TokenUpgradeV1Status) ProtoMessage()    {}
func (*TokenUpgradeV1Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe80c7a2c55589e7, []int{3}
}
func (m *TokenUpgradeV1Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenUpgradeV1Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenUpgradeV1Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenUpgradeV1Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenUpgradeV1Status.Merge(m, src)
}
func (m *TokenUpgradeV1Status) XXX_Size() int {
	return m.Size()
}
func (m *TokenUpgradeV1Status) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenUpgradeV1Status.DiscardUnknown(m)
}

var xxx_messageInfo_TokenUpgradeV1Status proto.InternalMessageInfo

func (m *TokenUpgradeV1Status) GetIbcEnabled() bool {
	if m != nil {
		return m.IbcEnabled
	}
	return false
}

func (m *TokenUpgradeV1Status) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *TokenUpgradeV1Status) GetEndTime() time.Time {
	if m != nil {
		return m.EndTime
	}
	return time.Time{}
}

// TokenUpgradeStatuses defines all statuses of the token migrations.
type TokenUpgradeStatuses struct {
	V1 *TokenUpgradeV1Status `protobuf:"bytes,1,opt,name=v1,proto3" json:"v1,omitempty"`
}

func (m *TokenUpgradeStatuses) Reset()         { *m = TokenUpgradeStatuses{} }
func (m *TokenUpgradeStatuses) String() string { return proto.CompactTextString(m) }
func (*TokenUpgradeStatuses) ProtoMessage()    {}
func (*TokenUpgradeStatuses) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe80c7a2c55589e7, []int{4}
}
func (m *TokenUpgradeStatuses) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenUpgradeStatuses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenUpgradeStatuses.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenUpgradeStatuses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenUpgradeStatuses.Merge(m, src)
}
func (m *TokenUpgradeStatuses) XXX_Size() int {
	return m.Size()
}
func (m *TokenUpgradeStatuses) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenUpgradeStatuses.DiscardUnknown(m)
}

var xxx_messageInfo_TokenUpgradeStatuses proto.InternalMessageInfo

func (m *TokenUpgradeStatuses) GetV1() *TokenUpgradeV1Status {
	if m != nil {
		return m.V1
	}
	return nil
}

// DEXSettings defines the token settings of the dex.
type DEXSettings struct {
	// unified_ref_amount is the approximate amount you need to by 1USD, used to define the price tick size
	UnifiedRefAmount cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=unified_ref_amount,json=unifiedRefAmount,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"unified_ref_amount"`
}

func (m *DEXSettings) Reset()         { *m = DEXSettings{} }
func (m *DEXSettings) String() string { return proto.CompactTextString(m) }
func (*DEXSettings) ProtoMessage()    {}
func (*DEXSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe80c7a2c55589e7, []int{5}
}
func (m *DEXSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DEXSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DEXSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DEXSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DEXSettings.Merge(m, src)
}
func (m *DEXSettings) XXX_Size() int {
	return m.Size()
}
func (m *DEXSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_DEXSettings.DiscardUnknown(m)
}

var xxx_messageInfo_DEXSettings proto.InternalMessageInfo

// DEXRestrictions defines the DEX restrictions.
type DEXRestrictions struct {
	// denoms_to_trade_with is the list of denoms to trade with.
	DenomsToTradeWith []string `protobuf:"bytes,1,rep,name=denoms_to_trade_with,json=denomsToTradeWith,proto3" json:"denoms_to_trade_with,omitempty"`
}

func (m *DEXRestrictions) Reset()         { *m = DEXRestrictions{} }
func (m *DEXRestrictions) String() string { return proto.CompactTextString(m) }
func (*DEXRestrictions) ProtoMessage()    {}
func (*DEXRestrictions) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe80c7a2c55589e7, []int{6}
}
func (m *DEXRestrictions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DEXRestrictions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DEXRestrictions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DEXRestrictions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DEXRestrictions.Merge(m, src)
}
func (m *DEXRestrictions) XXX_Size() int {
	return m.Size()
}
func (m *DEXRestrictions) XXX_DiscardUnknown() {
	xxx_messageInfo_DEXRestrictions.DiscardUnknown(m)
}

var xxx_messageInfo_DEXRestrictions proto.InternalMessageInfo

func (m *DEXRestrictions) GetDenomsToTradeWith() []string {
	if m != nil {
		return m.DenomsToTradeWith
	}
	return nil
}

func init() {
	proto.RegisterEnum("coreum.asset.ft.v1.Feature", Feature_name, Feature_value)
	proto.RegisterType((*Definition)(nil), "coreum.asset.ft.v1.Definition")
	proto.RegisterType((*Token)(nil), "coreum.asset.ft.v1.Token")
	proto.RegisterType((*DelayedTokenUpgradeV1)(nil), "coreum.asset.ft.v1.DelayedTokenUpgradeV1")
	proto.RegisterType((*TokenUpgradeV1Status)(nil), "coreum.asset.ft.v1.TokenUpgradeV1Status")
	proto.RegisterType((*TokenUpgradeStatuses)(nil), "coreum.asset.ft.v1.TokenUpgradeStatuses")
	proto.RegisterType((*DEXSettings)(nil), "coreum.asset.ft.v1.DEXSettings")
	proto.RegisterType((*DEXRestrictions)(nil), "coreum.asset.ft.v1.DEXRestrictions")
}

func init() { proto.RegisterFile("coreum/asset/ft/v1/token.proto", fileDescriptor_fe80c7a2c55589e7) }

var fileDescriptor_fe80c7a2c55589e7 = []byte{
	// 983 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4d, 0x6f, 0xdb, 0x46,
	0x13, 0x16, 0x2d, 0x5b, 0xa2, 0x56, 0xfe, 0x50, 0xf6, 0x55, 0x0c, 0xc6, 0x79, 0x21, 0x0a, 0x0a,
	0xd0, 0x0a, 0x05, 0x4a, 0xc2, 0xee, 0x27, 0x7a, 0x69, 0x23, 0x7f, 0xc0, 0x01, 0x7a, 0x48, 0xd7,
	0x76, 0x53, 0xf4, 0xc2, 0x2e, 0xc9, 0x91, 0xb4, 0xb0, 0xc8, 0x15, 0x76, 0x97, 0xb2, 0x9c, 0x5f,
	0xd0, 0x63, 0x7e, 0x42, 0x80, 0xa2, 0x3f, 0xa3, 0xf7, 0x1c, 0x03, 0xf4, 0x52, 0xf4, 0xa0, 0x16,
	0xf2, 0xa5, 0x3f, 0xa3, 0xd8, 0xa5, 0xe4, 0xc8, 0xa9, 0x8a, 0x26, 0x46, 0x6e, 0x7a, 0x9e, 0x99,
	0x79, 0x34, 0x9a, 0x79, 0x66, 0x21, 0xd4, 0x88, 0xb8, 0x80, 0x2c, 0xf1, 0xa9, 0x94, 0xa0, 0xfc,
	0xae, 0xf2, 0x47, 0xbb, 0xbe, 0xe2, 0xe7, 0x90, 0x7a, 0x43, 0xc1, 0x15, 0xc7, 0x38, 0x8f, 0x7b,
	0x26, 0xee, 0x75, 0x95, 0x37, 0xda, 0xdd, 0xa9, 0xf7, 0x78, 0x8f, 0x9b, 0xb0, 0xaf, 0x3f, 0xe5,
	0x99, 0x3b, 0x6e, 0x8f, 0xf3, 0xde, 0x00, 0x7c, 0x83, 0xc2, 0xac, 0xeb, 0x2b, 0x96, 0x80, 0x54,
	0x34, 0x19, 0xe6, 0x09, 0xad, 0x5f, 0x8b, 0x08, 0x1d, 0x40, 0x97, 0xa5, 0x4c, 0x31, 0x9e, 0xe2,
	0x3a, 0x5a, 0x8b, 0x21, 0xe5, 0x89, 0x63, 0x35, 0xad, 0x76, 0x85, 0xe4, 0x00, 0x6f, 0xa3, 0x12,
	0x93, 0x32, 0x03, 0xe1, 0xac, 0x18, 0x7a, 0x86, 0xf0, 0x67, 0xc8, 0xee, 0x02, 0x55, 0x99, 0x00,
	0xe9, 0x14, 0x9b, 0xc5, 0xf6, 0xe6, 0xde, 0x7d, 0xef, 0x9f, 0xad, 0x79, 0x47, 0x79, 0x0e, 0xb9,
	0x4e, 0xc6, 0x5f, 0xa1, 0x4a, 0x98, 0x89, 0x34, 0x10, 0x54, 0x81, 0xb3, 0xaa, 0x35, 0x3b, 0x0f,
	0x5e, 0x4c, 0xdc, 0xc2, 0xef, 0x13, 0xf7, 0x7e, 0xc4, 0x65, 0xc2, 0xa5, 0x8c, 0xcf, 0x3d, 0xc6,
	0xfd, 0x84, 0xaa, 0xbe, 0xf7, 0x35, 0xf4, 0x68, 0x74, 0x79, 0x00, 0x11, 0xb1, 0x75, 0x15, 0xa1,
	0x0a, 0xf0, 0x19, 0xaa, 0x4b, 0x48, 0xe3, 0x20, 0xe2, 0x49, 0xc2, 0xa4, 0x64, 0x7c, 0x26, 0xb6,
	0xf6, 0xe6, 0x62, 0x58, 0x0b, 0xec, 0x5f, 0xd7, 0x1b, 0x59, 0x07, 0x95, 0x47, 0x20, 0x34, 0x74,
	0x4a, 0x4d, 0xab, 0xbd, 0x41, 0xe6, 0x10, 0xdf, 0x43, 0xc5, 0x4c, 0x30, 0xa7, 0x6c, 0xf4, 0xcb,
	0xd3, 0x89, 0x5b, 0x3c, 0x23, 0x8f, 0x88, 0xe6, 0xf0, 0x7b, 0xc8, 0xce, 0x04, 0x0b, 0xfa, 0x54,
	0xf6, 0x1d, 0xdb, 0xc4, 0xab, 0xd3, 0x89, 0x5b, 0x3e, 0x23, 0x8f, 0x8e, 0xa9, 0xec, 0x93, 0x72,
	0x26, 0x98, 0xfe, 0x80, 0x8f, 0x51, 0x1d, 0xc6, 0x0a, 0x52, 0xd3, 0x6d, 0x74, 0x11, 0xd0, 0x38,
	0x16, 0x20, 0xa5, 0x53, 0x31, 0x35, 0xdb, 0xd3, 0x89, 0x8b, 0x0f, 0xe7, 0xf1, 0xfd, 0x27, 0x0f,
	0xf3, 0x28, 0xc1, 0xd7, 0x35, 0xfb, 0x17, 0x33, 0x4e, 0xaf, 0x89, 0xc6, 0x09, 0x4b, 0x1d, 0x94,
	0xaf, 0xc9, 0x80, 0x2f, 0xec, 0x1f, 0x9f, 0xbb, 0x85, 0xbf, 0x9e, 0xbb, 0x85, 0xd6, 0x4f, 0x25,
	0xb4, 0x76, 0xaa, 0x0d, 0xf3, 0x96, 0x0b, 0xdd, 0x46, 0x25, 0x79, 0x99, 0x84, 0x7c, 0xe0, 0x14,
	0x73, 0x3e, 0x47, 0x7a, 0x2c, 0x32, 0x0b, 0xb3, 0x94, 0xa9, 0x7c, 0x5b, 0x64, 0x0e, 0xf1, 0xff,
	0x51, 0x65, 0x28, 0x20, 0x62, 0x66, 0x64, 0x6b, 0x66, 0x64, 0xaf, 0x08, 0xdc, 0x44, 0xd5, 0x18,
	0x64, 0x24, 0xd8, 0x50, 0xcd, 0x47, 0x5a, 0x21, 0x8b, 0x14, 0x7e, 0x1f, 0x6d, 0xf5, 0x06, 0x3c,
	0xa4, 0x83, 0xc1, 0x65, 0xd0, 0x15, 0xfc, 0x29, 0xa4, 0x66, 0xc4, 0x36, 0xd9, 0x9c, 0xd3, 0x47,
	0x86, 0xbd, 0xe1, 0x35, 0xfb, 0xd6, 0x5e, 0xab, 0xbc, 0x4b, 0xaf, 0xa1, 0x77, 0xe6, 0xb5, 0xea,
	0x52, 0xaf, 0xad, 0xff, 0x87, 0xd7, 0x36, 0x6e, 0xe1, 0xb5, 0xcd, 0xdb, 0x7b, 0x6d, 0x6b, 0xc1,
	0x6b, 0xf8, 0x04, 0xad, 0xc7, 0x30, 0x0e, 0x24, 0x28, 0xc5, 0xd2, 0x9e, 0x74, 0x6a, 0x4d, 0xab,
	0x5d, 0xdd, 0x73, 0x97, 0xad, 0xe4, 0xe0, 0xf0, 0xbb, 0x93, 0x59, 0x5a, 0x67, 0x6b, 0x3a, 0x71,
	0xab, 0x0b, 0x84, 0x36, 0xc3, 0x78, 0x0e, 0x70, 0x84, 0x6a, 0x5a, 0x54, 0x80, 0x54, 0x82, 0x45,
	0xda, 0x1f, 0xd2, 0xb9, 0x63, 0x84, 0x1f, 0xfc, 0x8b, 0x30, 0x59, 0x48, 0xed, 0xfc, 0x6f, 0x3a,
	0x71, 0xb7, 0x5e, 0x23, 0xc9, 0x56, 0x0c, 0xe3, 0x45, 0x62, 0xe1, 0x4a, 0x3e, 0x44, 0x77, 0x0f,
	0x60, 0x40, 0x2f, 0x21, 0x36, 0xb7, 0x72, 0x36, 0xec, 0x09, 0x1a, 0xc3, 0xb7, 0xbb, 0xcb, 0x8f,
	0xa6, 0xf5, 0x8b, 0x85, 0xea, 0x37, 0x13, 0x4f, 0x14, 0x55, 0x99, 0xc4, 0x2e, 0xaa, 0xb2, 0x30,
	0x0a, 0x20, 0xa5, 0xe1, 0x00, 0x62, 0x53, 0x64, 0x13, 0xc4, 0xc2, 0xe8, 0x30, 0x67, 0xf0, 0x3e,
	0x42, 0x52, 0x51, 0xa1, 0x02, 0xfd, 0xfa, 0x9a, 0x93, 0xab, 0xee, 0xed, 0x78, 0xf9, 0xd3, 0xec,
	0xcd, 0x9f, 0x66, 0xef, 0x74, 0xfe, 0x34, 0x77, 0x6c, 0x6d, 0xa9, 0x67, 0x7f, 0xb8, 0x16, 0xa9,
	0x98, 0x3a, 0x1d, 0xc1, 0x5f, 0x22, 0x5b, 0x9b, 0xd0, 0x48, 0x14, 0xdf, 0x42, 0xa2, 0x0c, 0x69,
	0xac, 0xf9, 0xd6, 0xe3, 0x9b, 0xed, 0xe7, 0xcd, 0x83, 0xc4, 0x9f, 0xa3, 0x95, 0xd1, 0xae, 0xe9,
	0xba, 0xba, 0xd7, 0x5e, 0x36, 0xe7, 0x65, 0x3f, 0x9a, 0xac, 0x8c, 0x76, 0x5b, 0x3f, 0xa0, 0xc5,
	0x5d, 0xe2, 0x6f, 0x10, 0xce, 0x52, 0xd6, 0x65, 0x10, 0x07, 0x02, 0xba, 0x01, 0x4d, 0x78, 0x96,
	0xaa, 0x7c, 0x86, 0x6f, 0x76, 0x25, 0xb5, 0x59, 0x39, 0x81, 0xee, 0x43, 0x53, 0xdc, 0x3a, 0x46,
	0xaf, 0x2f, 0x14, 0x7f, 0x82, 0xea, 0x66, 0x1f, 0x32, 0x50, 0x3c, 0x50, 0xba, 0xa7, 0xe0, 0x82,
	0xa9, 0xbe, 0x63, 0x35, 0x8b, 0xed, 0x4a, 0x67, 0x55, 0x7f, 0x0f, 0xb9, 0x93, 0x67, 0x9c, 0xf2,
	0x53, 0x1d, 0x7f, 0xc2, 0x54, 0xff, 0x83, 0x9f, 0x2d, 0x54, 0x9e, 0x3d, 0x0e, 0xb8, 0x8a, 0xca,
	0x09, 0x4b, 0x75, 0xd3, 0xb5, 0x82, 0x06, 0xfa, 0xd2, 0x35, 0xb0, 0xf0, 0x3a, 0xb2, 0xbb, 0x02,
	0xe0, 0xa9, 0x46, 0x2b, 0xb8, 0x86, 0xd6, 0x2f, 0xfa, 0x4c, 0xc1, 0x80, 0x49, 0x93, 0x5c, 0xc4,
	0x65, 0x54, 0x64, 0x61, 0x54, 0x5b, 0xc5, 0xf7, 0xd0, 0xdd, 0x70, 0xc0, 0xa3, 0xf3, 0x40, 0x26,
	0x7a, 0xb1, 0x11, 0x4f, 0x95, 0xa0, 0x91, 0x92, 0xb5, 0x35, 0xad, 0x11, 0x0d, 0xe8, 0x45, 0x48,
	0xa3, 0xf3, 0x5a, 0x09, 0x6f, 0xa0, 0xca, 0xf5, 0x51, 0xd5, 0xca, 0x1a, 0xe6, 0x75, 0x31, 0x8c,
	0x6b, 0xb6, 0xfe, 0x86, 0xb9, 0xdb, 0x0d, 0x53, 0xe9, 0x3c, 0x7e, 0x31, 0x6d, 0x58, 0x2f, 0xa7,
	0x0d, 0xeb, 0xcf, 0x69, 0xc3, 0x7a, 0x76, 0xd5, 0x28, 0xbc, 0xbc, 0x6a, 0x14, 0x7e, 0xbb, 0x6a,
	0x14, 0xbe, 0xff, 0xb4, 0xc7, 0x54, 0x3f, 0x0b, 0xbd, 0x88, 0x27, 0xfe, 0xbe, 0xd9, 0xd2, 0x11,
	0xcf, 0xd2, 0x98, 0xea, 0xb1, 0xf8, 0xb3, 0x7f, 0x0c, 0xa3, 0x8f, 0xfd, 0xf1, 0xab, 0xbf, 0x0d,
	0xea, 0x72, 0x08, 0x32, 0x2c, 0x19, 0x7b, 0x7c, 0xf4, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x17,
	0xbf, 0xac, 0xb7, 0x56, 0x08, 0x00, 0x00,
}

func (m *Definition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Definition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Definition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintToken(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ExtensionCWAddress) > 0 {
		i -= len(m.ExtensionCWAddress)
		copy(dAtA[i:], m.ExtensionCWAddress)
		i = encodeVarintToken(dAtA, i, uint64(len(m.ExtensionCWAddress)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.URIHash) > 0 {
		i -= len(m.URIHash)
		copy(dAtA[i:], m.URIHash)
		i = encodeVarintToken(dAtA, i, uint64(len(m.URIHash)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.URI) > 0 {
		i -= len(m.URI)
		copy(dAtA[i:], m.URI)
		i = encodeVarintToken(dAtA, i, uint64(len(m.URI)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Version != 0 {
		i = encodeVarintToken(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.SendCommissionRate.Size()
		i -= size
		if _, err := m.SendCommissionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintToken(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.BurnRate.Size()
		i -= size
		if _, err := m.BurnRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintToken(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Features) > 0 {
		dAtA2 := make([]byte, len(m.Features)*10)
		var j1 int
		for _, num := range m.Features {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintToken(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintToken(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintToken(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Token) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Token) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Token) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DEXRestrictions != nil {
		{
			size, err := m.DEXRestrictions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintToken(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.DEXSettings != nil {
		{
			size, err := m.DEXSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintToken(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintToken(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.ExtensionCWAddress) > 0 {
		i -= len(m.ExtensionCWAddress)
		copy(dAtA[i:], m.ExtensionCWAddress)
		i = encodeVarintToken(dAtA, i, uint64(len(m.ExtensionCWAddress)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.URIHash) > 0 {
		i -= len(m.URIHash)
		copy(dAtA[i:], m.URIHash)
		i = encodeVarintToken(dAtA, i, uint64(len(m.URIHash)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.URI) > 0 {
		i -= len(m.URI)
		copy(dAtA[i:], m.URI)
		i = encodeVarintToken(dAtA, i, uint64(len(m.URI)))
		i--
		dAtA[i] = 0x62
	}
	if m.Version != 0 {
		i = encodeVarintToken(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x58
	}
	{
		size := m.SendCommissionRate.Size()
		i -= size
		if _, err := m.SendCommissionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintToken(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.BurnRate.Size()
		i -= size
		if _, err := m.BurnRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintToken(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.Features) > 0 {
		dAtA6 := make([]byte, len(m.Features)*10)
		var j5 int
		for _, num := range m.Features {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintToken(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x42
	}
	if m.GloballyFrozen {
		i--
		if m.GloballyFrozen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintToken(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x32
	}
	if m.Precision != 0 {
		i = encodeVarintToken(dAtA, i, uint64(m.Precision))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Subunit) > 0 {
		i -= len(m.Subunit)
		copy(dAtA[i:], m.Subunit)
		i = encodeVarintToken(dAtA, i, uint64(len(m.Subunit)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintToken(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintToken(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintToken(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelayedTokenUpgradeV1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelayedTokenUpgradeV1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelayedTokenUpgradeV1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintToken(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TokenUpgradeV1Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenUpgradeV1Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenUpgradeV1Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n7, err7 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintToken(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x1a
	n8, err8 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintToken(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0x12
	if m.IbcEnabled {
		i--
		if m.IbcEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TokenUpgradeStatuses) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenUpgradeStatuses) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenUpgradeStatuses) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.V1 != nil {
		{
			size, err := m.V1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintToken(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DEXSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DEXSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DEXSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.UnifiedRefAmount.Size()
		i -= size
		if _, err := m.UnifiedRefAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintToken(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DEXRestrictions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DEXRestrictions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DEXRestrictions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DenomsToTradeWith) > 0 {
		for iNdEx := len(m.DenomsToTradeWith) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DenomsToTradeWith[iNdEx])
			copy(dAtA[i:], m.DenomsToTradeWith[iNdEx])
			i = encodeVarintToken(dAtA, i, uint64(len(m.DenomsToTradeWith[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintToken(dAtA []byte, offset int, v uint64) int {
	offset -= sovToken(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Definition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	if len(m.Features) > 0 {
		l = 0
		for _, e := range m.Features {
			l += sovToken(uint64(e))
		}
		n += 1 + sovToken(uint64(l)) + l
	}
	l = m.BurnRate.Size()
	n += 1 + l + sovToken(uint64(l))
	l = m.SendCommissionRate.Size()
	n += 1 + l + sovToken(uint64(l))
	if m.Version != 0 {
		n += 1 + sovToken(uint64(m.Version))
	}
	l = len(m.URI)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	l = len(m.URIHash)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	l = len(m.ExtensionCWAddress)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	return n
}

func (m *Token) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	l = len(m.Subunit)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	if m.Precision != 0 {
		n += 1 + sovToken(uint64(m.Precision))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	if m.GloballyFrozen {
		n += 2
	}
	if len(m.Features) > 0 {
		l = 0
		for _, e := range m.Features {
			l += sovToken(uint64(e))
		}
		n += 1 + sovToken(uint64(l)) + l
	}
	l = m.BurnRate.Size()
	n += 1 + l + sovToken(uint64(l))
	l = m.SendCommissionRate.Size()
	n += 1 + l + sovToken(uint64(l))
	if m.Version != 0 {
		n += 1 + sovToken(uint64(m.Version))
	}
	l = len(m.URI)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	l = len(m.URIHash)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	l = len(m.ExtensionCWAddress)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	if m.DEXSettings != nil {
		l = m.DEXSettings.Size()
		n += 2 + l + sovToken(uint64(l))
	}
	if m.DEXRestrictions != nil {
		l = m.DEXRestrictions.Size()
		n += 2 + l + sovToken(uint64(l))
	}
	return n
}

func (m *DelayedTokenUpgradeV1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	return n
}

func (m *TokenUpgradeV1Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IbcEnabled {
		n += 2
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovToken(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovToken(uint64(l))
	return n
}

func (m *TokenUpgradeStatuses) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.V1 != nil {
		l = m.V1.Size()
		n += 1 + l + sovToken(uint64(l))
	}
	return n
}

func (m *DEXSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.UnifiedRefAmount.Size()
	n += 1 + l + sovToken(uint64(l))
	return n
}

func (m *DEXRestrictions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DenomsToTradeWith) > 0 {
		for _, s := range m.DenomsToTradeWith {
			l = len(s)
			n += 1 + l + sovToken(uint64(l))
		}
	}
	return n
}

func sovToken(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozToken(x uint64) (n int) {
	return sovToken(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Definition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Definition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Definition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v Feature
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowToken
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Feature(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Features = append(m.Features, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowToken
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthToken
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthToken
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Features) == 0 {
					m.Features = make([]Feature, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Feature
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowToken
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Feature(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Features = append(m.Features, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Features", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendCommissionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SendCommissionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URIHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URIHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionCWAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtensionCWAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Token) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Token: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Token: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subunit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subunit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Precision", wireType)
			}
			m.Precision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Precision |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GloballyFrozen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GloballyFrozen = bool(v != 0)
		case 8:
			if wireType == 0 {
				var v Feature
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowToken
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Feature(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Features = append(m.Features, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowToken
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthToken
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthToken
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Features) == 0 {
					m.Features = make([]Feature, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Feature
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowToken
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Feature(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Features = append(m.Features, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Features", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendCommissionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SendCommissionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URIHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URIHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionCWAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtensionCWAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DEXSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DEXSettings == nil {
				m.DEXSettings = &DEXSettings{}
			}
			if err := m.DEXSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DEXRestrictions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DEXRestrictions == nil {
				m.DEXRestrictions = &DEXRestrictions{}
			}
			if err := m.DEXRestrictions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelayedTokenUpgradeV1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelayedTokenUpgradeV1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelayedTokenUpgradeV1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenUpgradeV1Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenUpgradeV1Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenUpgradeV1Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IbcEnabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenUpgradeStatuses) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenUpgradeStatuses: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenUpgradeStatuses: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.V1 == nil {
				m.V1 = &TokenUpgradeV1Status{}
			}
			if err := m.V1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DEXSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DEXSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DEXSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnifiedRefAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnifiedRefAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DEXRestrictions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DEXRestrictions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DEXRestrictions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomsToTradeWith", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomsToTradeWith = append(m.DenomsToTradeWith, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipToken(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowToken
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthToken
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupToken
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthToken
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthToken        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowToken          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupToken = fmt.Errorf("proto: unexpected end of group")
)
