// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: coreum/asset/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgIssueFungibleToken defines message to issue new fungible token.
type MsgIssueFungibleToken struct {
	Issuer        string                                 `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Symbol        string                                 `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Description   string                                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Recipient     string                                 `protobuf:"bytes,4,opt,name=recipient,proto3" json:"recipient,omitempty"`
	InitialAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=initial_amount,json=initialAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"initial_amount"`
	Options       []FungibleTokenOption                  `protobuf:"varint,6,rep,packed,name=options,proto3,enum=coreum.asset.v1.FungibleTokenOption" json:"options,omitempty"`
}

func (m *MsgIssueFungibleToken) Reset()         { *m = MsgIssueFungibleToken{} }
func (m *MsgIssueFungibleToken) String() string { return proto.CompactTextString(m) }
func (*MsgIssueFungibleToken) ProtoMessage()    {}
func (*MsgIssueFungibleToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_67f41154fcbb1ebe, []int{0}
}
func (m *MsgIssueFungibleToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIssueFungibleToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIssueFungibleToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIssueFungibleToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIssueFungibleToken.Merge(m, src)
}
func (m *MsgIssueFungibleToken) XXX_Size() int {
	return m.Size()
}
func (m *MsgIssueFungibleToken) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIssueFungibleToken.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIssueFungibleToken proto.InternalMessageInfo

// MsgIssueFungibleTokenResponse defines message response for the IssueFungibleToken.
type MsgIssueFungibleTokenResponse struct {
}

func (m *MsgIssueFungibleTokenResponse) Reset()         { *m = MsgIssueFungibleTokenResponse{} }
func (m *MsgIssueFungibleTokenResponse) String() string { return proto.CompactTextString(m) }
func (*MsgIssueFungibleTokenResponse) ProtoMessage()    {}
func (*MsgIssueFungibleTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_67f41154fcbb1ebe, []int{1}
}
func (m *MsgIssueFungibleTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIssueFungibleTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIssueFungibleTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIssueFungibleTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIssueFungibleTokenResponse.Merge(m, src)
}
func (m *MsgIssueFungibleTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgIssueFungibleTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIssueFungibleTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIssueFungibleTokenResponse proto.InternalMessageInfo

type MsgFreezeFungibleToken struct {
	Issuer  string     `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Account string     `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	Coin    types.Coin `protobuf:"bytes,3,opt,name=coin,proto3" json:"coin"`
}

func (m *MsgFreezeFungibleToken) Reset()         { *m = MsgFreezeFungibleToken{} }
func (m *MsgFreezeFungibleToken) String() string { return proto.CompactTextString(m) }
func (*MsgFreezeFungibleToken) ProtoMessage()    {}
func (*MsgFreezeFungibleToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_67f41154fcbb1ebe, []int{2}
}
func (m *MsgFreezeFungibleToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFreezeFungibleToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFreezeFungibleToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFreezeFungibleToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFreezeFungibleToken.Merge(m, src)
}
func (m *MsgFreezeFungibleToken) XXX_Size() int {
	return m.Size()
}
func (m *MsgFreezeFungibleToken) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFreezeFungibleToken.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFreezeFungibleToken proto.InternalMessageInfo

func (m *MsgFreezeFungibleToken) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *MsgFreezeFungibleToken) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *MsgFreezeFungibleToken) GetCoin() types.Coin {
	if m != nil {
		return m.Coin
	}
	return types.Coin{}
}

type MsgFreezeFungibleTokenResponse struct {
}

func (m *MsgFreezeFungibleTokenResponse) Reset()         { *m = MsgFreezeFungibleTokenResponse{} }
func (m *MsgFreezeFungibleTokenResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFreezeFungibleTokenResponse) ProtoMessage()    {}
func (*MsgFreezeFungibleTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_67f41154fcbb1ebe, []int{3}
}
func (m *MsgFreezeFungibleTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFreezeFungibleTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFreezeFungibleTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFreezeFungibleTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFreezeFungibleTokenResponse.Merge(m, src)
}
func (m *MsgFreezeFungibleTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFreezeFungibleTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFreezeFungibleTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFreezeFungibleTokenResponse proto.InternalMessageInfo

type MsgUnfreezeFungibleToken struct {
	Issuer  string     `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Account string     `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	Coin    types.Coin `protobuf:"bytes,3,opt,name=coin,proto3" json:"coin"`
}

func (m *MsgUnfreezeFungibleToken) Reset()         { *m = MsgUnfreezeFungibleToken{} }
func (m *MsgUnfreezeFungibleToken) String() string { return proto.CompactTextString(m) }
func (*MsgUnfreezeFungibleToken) ProtoMessage()    {}
func (*MsgUnfreezeFungibleToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_67f41154fcbb1ebe, []int{4}
}
func (m *MsgUnfreezeFungibleToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnfreezeFungibleToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnfreezeFungibleToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnfreezeFungibleToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnfreezeFungibleToken.Merge(m, src)
}
func (m *MsgUnfreezeFungibleToken) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnfreezeFungibleToken) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnfreezeFungibleToken.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnfreezeFungibleToken proto.InternalMessageInfo

func (m *MsgUnfreezeFungibleToken) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *MsgUnfreezeFungibleToken) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *MsgUnfreezeFungibleToken) GetCoin() types.Coin {
	if m != nil {
		return m.Coin
	}
	return types.Coin{}
}

type MsgUnfreezeFungibleTokenResponse struct {
}

func (m *MsgUnfreezeFungibleTokenResponse) Reset()         { *m = MsgUnfreezeFungibleTokenResponse{} }
func (m *MsgUnfreezeFungibleTokenResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnfreezeFungibleTokenResponse) ProtoMessage()    {}
func (*MsgUnfreezeFungibleTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_67f41154fcbb1ebe, []int{5}
}
func (m *MsgUnfreezeFungibleTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnfreezeFungibleTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnfreezeFungibleTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnfreezeFungibleTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnfreezeFungibleTokenResponse.Merge(m, src)
}
func (m *MsgUnfreezeFungibleTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnfreezeFungibleTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnfreezeFungibleTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnfreezeFungibleTokenResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgIssueFungibleToken)(nil), "coreum.asset.v1.MsgIssueFungibleToken")
	proto.RegisterType((*MsgIssueFungibleTokenResponse)(nil), "coreum.asset.v1.MsgIssueFungibleTokenResponse")
	proto.RegisterType((*MsgFreezeFungibleToken)(nil), "coreum.asset.v1.MsgFreezeFungibleToken")
	proto.RegisterType((*MsgFreezeFungibleTokenResponse)(nil), "coreum.asset.v1.MsgFreezeFungibleTokenResponse")
	proto.RegisterType((*MsgUnfreezeFungibleToken)(nil), "coreum.asset.v1.MsgUnfreezeFungibleToken")
	proto.RegisterType((*MsgUnfreezeFungibleTokenResponse)(nil), "coreum.asset.v1.MsgUnfreezeFungibleTokenResponse")
}

func init() { proto.RegisterFile("coreum/asset/v1/tx.proto", fileDescriptor_67f41154fcbb1ebe) }

var fileDescriptor_67f41154fcbb1ebe = []byte{
	// 520 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0x4f, 0x6b, 0xd4, 0x40,
	0x1c, 0x4d, 0x76, 0xd7, 0xad, 0x9d, 0x62, 0x85, 0xd1, 0x96, 0x18, 0x35, 0x09, 0x41, 0x6a, 0x3d,
	0x38, 0x63, 0xb6, 0x37, 0x0f, 0x82, 0x5b, 0x58, 0xa8, 0xb0, 0x08, 0xc1, 0x5e, 0xbc, 0x48, 0x92,
	0x1d, 0xe3, 0xd0, 0xcd, 0x4c, 0xc8, 0x4c, 0x96, 0xd6, 0x8b, 0x78, 0xf3, 0xe8, 0x47, 0xe8, 0xd1,
	0x8f, 0xd2, 0x63, 0x8f, 0xa2, 0x50, 0x64, 0xf7, 0xe2, 0xc7, 0x90, 0x4c, 0x92, 0x5a, 0xd7, 0x11,
	0xf6, 0xe6, 0x29, 0x99, 0xdf, 0x7b, 0xf9, 0xfd, 0x79, 0x2f, 0xf3, 0x03, 0x56, 0xc2, 0x0b, 0x52,
	0x66, 0x38, 0x12, 0x82, 0x48, 0x3c, 0x0b, 0xb0, 0x3c, 0x46, 0x79, 0xc1, 0x25, 0x87, 0x37, 0x6b,
	0x04, 0x29, 0x04, 0xcd, 0x02, 0xfb, 0x76, 0xca, 0x53, 0xae, 0x30, 0x5c, 0xbd, 0xd5, 0x34, 0xdb,
	0x49, 0xb8, 0xc8, 0xb8, 0xc0, 0x71, 0x24, 0x08, 0x9e, 0x05, 0x31, 0x91, 0x51, 0x80, 0x13, 0x4e,
	0x59, 0x83, 0xdf, 0x5d, 0x2e, 0x50, 0xe7, 0x53, 0xa0, 0xff, 0xa5, 0x03, 0xb6, 0xc6, 0x22, 0x3d,
	0x10, 0xa2, 0x24, 0xa3, 0x92, 0xa5, 0x34, 0x9e, 0x92, 0x57, 0xfc, 0x88, 0x30, 0xb8, 0x0d, 0xfa,
	0xb4, 0x8a, 0x16, 0x96, 0xe9, 0x99, 0xbb, 0xeb, 0x61, 0x73, 0xaa, 0xe2, 0xe2, 0x24, 0x8b, 0xf9,
	0xd4, 0xea, 0xd4, 0xf1, 0xfa, 0x04, 0x3d, 0xb0, 0x31, 0x21, 0x22, 0x29, 0x68, 0x2e, 0x29, 0x67,
	0x56, 0x57, 0x81, 0x57, 0x43, 0xf0, 0x1e, 0x58, 0x2f, 0x48, 0x42, 0x73, 0x4a, 0x98, 0xb4, 0x7a,
	0x0a, 0xff, 0x1d, 0x80, 0x87, 0x60, 0x93, 0x32, 0x2a, 0x69, 0x34, 0x7d, 0x13, 0x65, 0xbc, 0x64,
	0xd2, 0xba, 0x56, 0x51, 0x86, 0xe8, 0xec, 0xc2, 0x35, 0xbe, 0x5d, 0xb8, 0x3b, 0x29, 0x95, 0xef,
	0xca, 0x18, 0x25, 0x3c, 0xc3, 0xcd, 0xc4, 0xf5, 0xe3, 0xb1, 0x98, 0x1c, 0x61, 0x79, 0x92, 0x13,
	0x81, 0x0e, 0x98, 0x0c, 0x6f, 0x34, 0x59, 0x9e, 0xab, 0x24, 0xf0, 0x19, 0x58, 0xe3, 0xaa, 0xbc,
	0xb0, 0xfa, 0x5e, 0x77, 0x77, 0x73, 0xf0, 0x00, 0x2d, 0xc9, 0x8a, 0xfe, 0x98, 0xfb, 0xa5, 0x22,
	0x87, 0xed, 0x47, 0x4f, 0xaf, 0x7f, 0x3a, 0x75, 0x8d, 0x9f, 0xa7, 0xae, 0xe1, 0xbb, 0xe0, 0xbe,
	0x56, 0xa9, 0x90, 0x88, 0x9c, 0x33, 0x41, 0xfc, 0x0f, 0x60, 0x7b, 0x2c, 0xd2, 0x51, 0x41, 0xc8,
	0xfb, 0x15, 0xb5, 0xb4, 0xc0, 0x5a, 0x94, 0x24, 0x6a, 0xd8, 0x5a, 0xcc, 0xf6, 0x08, 0xf7, 0x40,
	0xaf, 0xb2, 0x50, 0xc9, 0xb8, 0x31, 0xb8, 0x83, 0xea, 0x51, 0x51, 0xe5, 0x31, 0x6a, 0x3c, 0x46,
	0xfb, 0x9c, 0xb2, 0x61, 0xaf, 0x92, 0x27, 0x54, 0x64, 0xdf, 0x03, 0x8e, 0xbe, 0x81, 0xcb, 0x16,
	0x3f, 0x9a, 0xc0, 0x1a, 0x8b, 0xf4, 0x90, 0xbd, 0xfd, 0x7f, 0x5d, 0xfa, 0xc0, 0xfb, 0x57, 0x0b,
	0x6d, 0x9f, 0x83, 0xef, 0x1d, 0xd0, 0x1d, 0x8b, 0x14, 0x4e, 0x01, 0xd4, 0xfc, 0x9a, 0x3b, 0x7f,
	0x59, 0xa8, 0x35, 0xc6, 0x46, 0xab, 0xf1, 0xda, 0xaa, 0x90, 0x83, 0x5b, 0x3a, 0xf7, 0x1e, 0xea,
	0xd2, 0x68, 0x88, 0x36, 0x5e, 0x91, 0x78, 0x59, 0xb0, 0x04, 0x5b, 0x7a, 0x2b, 0x1e, 0xe9, 0x32,
	0x69, 0xa9, 0x76, 0xb0, 0x32, 0xb5, 0x2d, 0x3b, 0x7c, 0x71, 0x36, 0x77, 0xcc, 0xf3, 0xb9, 0x63,
	0xfe, 0x98, 0x3b, 0xe6, 0xe7, 0x85, 0x63, 0x9c, 0x2f, 0x1c, 0xe3, 0xeb, 0xc2, 0x31, 0x5e, 0x3f,
	0xb9, 0x72, 0xc9, 0xf6, 0x55, 0xda, 0x11, 0x2f, 0xd9, 0x24, 0xaa, 0xee, 0x02, 0x6e, 0xf6, 0xc8,
	0x71, 0xb3, 0x49, 0xd4, 0x95, 0x8b, 0xfb, 0x6a, 0x8f, 0xec, 0xfd, 0x0a, 0x00, 0x00, 0xff, 0xff,
	0x86, 0x95, 0x1d, 0x05, 0xc7, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// IssueFungibleToken defines a method to issue a new fungible token.
	IssueFungibleToken(ctx context.Context, in *MsgIssueFungibleToken, opts ...grpc.CallOption) (*MsgIssueFungibleTokenResponse, error)
	// FreezeFungibleToken freezes a part of the fungible tokens in an
	// account, only if the freezable option is enabled on that token.
	FreezeFungibleToken(ctx context.Context, in *MsgFreezeFungibleToken, opts ...grpc.CallOption) (*MsgFreezeFungibleTokenResponse, error)
	// UnfreezeFungibleToken unfreezes a part of the frozen fungible tokens in an
	// account, only if there are such frozen tokens on that account
	UnfreezeFungibleToken(ctx context.Context, in *MsgUnfreezeFungibleToken, opts ...grpc.CallOption) (*MsgUnfreezeFungibleTokenResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) IssueFungibleToken(ctx context.Context, in *MsgIssueFungibleToken, opts ...grpc.CallOption) (*MsgIssueFungibleTokenResponse, error) {
	out := new(MsgIssueFungibleTokenResponse)
	err := c.cc.Invoke(ctx, "/coreum.asset.v1.Msg/IssueFungibleToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FreezeFungibleToken(ctx context.Context, in *MsgFreezeFungibleToken, opts ...grpc.CallOption) (*MsgFreezeFungibleTokenResponse, error) {
	out := new(MsgFreezeFungibleTokenResponse)
	err := c.cc.Invoke(ctx, "/coreum.asset.v1.Msg/FreezeFungibleToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnfreezeFungibleToken(ctx context.Context, in *MsgUnfreezeFungibleToken, opts ...grpc.CallOption) (*MsgUnfreezeFungibleTokenResponse, error) {
	out := new(MsgUnfreezeFungibleTokenResponse)
	err := c.cc.Invoke(ctx, "/coreum.asset.v1.Msg/UnfreezeFungibleToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// IssueFungibleToken defines a method to issue a new fungible token.
	IssueFungibleToken(context.Context, *MsgIssueFungibleToken) (*MsgIssueFungibleTokenResponse, error)
	// FreezeFungibleToken freezes a part of the fungible tokens in an
	// account, only if the freezable option is enabled on that token.
	FreezeFungibleToken(context.Context, *MsgFreezeFungibleToken) (*MsgFreezeFungibleTokenResponse, error)
	// UnfreezeFungibleToken unfreezes a part of the frozen fungible tokens in an
	// account, only if there are such frozen tokens on that account
	UnfreezeFungibleToken(context.Context, *MsgUnfreezeFungibleToken) (*MsgUnfreezeFungibleTokenResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) IssueFungibleToken(ctx context.Context, req *MsgIssueFungibleToken) (*MsgIssueFungibleTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueFungibleToken not implemented")
}
func (*UnimplementedMsgServer) FreezeFungibleToken(ctx context.Context, req *MsgFreezeFungibleToken) (*MsgFreezeFungibleTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreezeFungibleToken not implemented")
}
func (*UnimplementedMsgServer) UnfreezeFungibleToken(ctx context.Context, req *MsgUnfreezeFungibleToken) (*MsgUnfreezeFungibleTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfreezeFungibleToken not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_IssueFungibleToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIssueFungibleToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).IssueFungibleToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coreum.asset.v1.Msg/IssueFungibleToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).IssueFungibleToken(ctx, req.(*MsgIssueFungibleToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FreezeFungibleToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFreezeFungibleToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FreezeFungibleToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coreum.asset.v1.Msg/FreezeFungibleToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FreezeFungibleToken(ctx, req.(*MsgFreezeFungibleToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnfreezeFungibleToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnfreezeFungibleToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnfreezeFungibleToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coreum.asset.v1.Msg/UnfreezeFungibleToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnfreezeFungibleToken(ctx, req.(*MsgUnfreezeFungibleToken))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "coreum.asset.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IssueFungibleToken",
			Handler:    _Msg_IssueFungibleToken_Handler,
		},
		{
			MethodName: "FreezeFungibleToken",
			Handler:    _Msg_FreezeFungibleToken_Handler,
		},
		{
			MethodName: "UnfreezeFungibleToken",
			Handler:    _Msg_UnfreezeFungibleToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coreum/asset/v1/tx.proto",
}

func (m *MsgIssueFungibleToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIssueFungibleToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIssueFungibleToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Options) > 0 {
		dAtA2 := make([]byte, len(m.Options)*10)
		var j1 int
		for _, num := range m.Options {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTx(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x32
	}
	{
		size := m.InitialAmount.Size()
		i -= size
		if _, err := m.InitialAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgIssueFungibleTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIssueFungibleTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIssueFungibleTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgFreezeFungibleToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFreezeFungibleToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFreezeFungibleToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFreezeFungibleTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFreezeFungibleTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFreezeFungibleTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnfreezeFungibleToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnfreezeFungibleToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnfreezeFungibleToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnfreezeFungibleTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnfreezeFungibleTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnfreezeFungibleTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgIssueFungibleToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.InitialAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.Options) > 0 {
		l = 0
		for _, e := range m.Options {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	return n
}

func (m *MsgIssueFungibleTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgFreezeFungibleToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Coin.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgFreezeFungibleTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnfreezeFungibleToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Coin.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUnfreezeFungibleTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgIssueFungibleToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIssueFungibleToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIssueFungibleToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v FungibleTokenOption
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= FungibleTokenOption(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Options = append(m.Options, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Options) == 0 {
					m.Options = make([]FungibleTokenOption, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v FungibleTokenOption
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= FungibleTokenOption(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Options = append(m.Options, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIssueFungibleTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIssueFungibleTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIssueFungibleTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFreezeFungibleToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFreezeFungibleToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFreezeFungibleToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFreezeFungibleTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFreezeFungibleTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFreezeFungibleTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnfreezeFungibleToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnfreezeFungibleToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnfreezeFungibleToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnfreezeFungibleTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnfreezeFungibleTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnfreezeFungibleTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
