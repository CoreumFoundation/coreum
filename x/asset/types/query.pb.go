// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: coreum/asset/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryFungibleTokenRequest is request type for the Query/FungibleToken RPC method.
type QueryFungibleTokenRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryFungibleTokenRequest) Reset()         { *m = QueryFungibleTokenRequest{} }
func (m *QueryFungibleTokenRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFungibleTokenRequest) ProtoMessage()    {}
func (*QueryFungibleTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5e1eecf0acd8ab7, []int{0}
}
func (m *QueryFungibleTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFungibleTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFungibleTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFungibleTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFungibleTokenRequest.Merge(m, src)
}
func (m *QueryFungibleTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFungibleTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFungibleTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFungibleTokenRequest proto.InternalMessageInfo

func (m *QueryFungibleTokenRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// QueryFungibleTokenResponse is response type for the Query/FungibleToken RPC method.
type QueryFungibleTokenResponse struct {
	FungibleToken FungibleToken `protobuf:"bytes,1,opt,name=fungible_token,json=fungibleToken,proto3" json:"fungible_token"`
}

func (m *QueryFungibleTokenResponse) Reset()         { *m = QueryFungibleTokenResponse{} }
func (m *QueryFungibleTokenResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFungibleTokenResponse) ProtoMessage()    {}
func (*QueryFungibleTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5e1eecf0acd8ab7, []int{1}
}
func (m *QueryFungibleTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFungibleTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFungibleTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFungibleTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFungibleTokenResponse.Merge(m, src)
}
func (m *QueryFungibleTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFungibleTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFungibleTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFungibleTokenResponse proto.InternalMessageInfo

func (m *QueryFungibleTokenResponse) GetFungibleToken() FungibleToken {
	if m != nil {
		return m.FungibleToken
	}
	return FungibleToken{}
}

type QueryFrozenBalancesRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// account specifies the account onto which we query frozen balances
	Account string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *QueryFrozenBalancesRequest) Reset()         { *m = QueryFrozenBalancesRequest{} }
func (m *QueryFrozenBalancesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFrozenBalancesRequest) ProtoMessage()    {}
func (*QueryFrozenBalancesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5e1eecf0acd8ab7, []int{2}
}
func (m *QueryFrozenBalancesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFrozenBalancesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFrozenBalancesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFrozenBalancesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFrozenBalancesRequest.Merge(m, src)
}
func (m *QueryFrozenBalancesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFrozenBalancesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFrozenBalancesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFrozenBalancesRequest proto.InternalMessageInfo

func (m *QueryFrozenBalancesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryFrozenBalancesRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

type QueryFrozenBalancesResponse struct {
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// balances contains the frozen balances on the queried account
	Balances github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=balances,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"balances"`
}

func (m *QueryFrozenBalancesResponse) Reset()         { *m = QueryFrozenBalancesResponse{} }
func (m *QueryFrozenBalancesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFrozenBalancesResponse) ProtoMessage()    {}
func (*QueryFrozenBalancesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5e1eecf0acd8ab7, []int{3}
}
func (m *QueryFrozenBalancesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFrozenBalancesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFrozenBalancesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFrozenBalancesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFrozenBalancesResponse.Merge(m, src)
}
func (m *QueryFrozenBalancesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFrozenBalancesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFrozenBalancesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFrozenBalancesResponse proto.InternalMessageInfo

func (m *QueryFrozenBalancesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryFrozenBalancesResponse) GetBalances() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Balances
	}
	return nil
}

type QueryFrozenBalanceRequest struct {
	// account specifies the account onto which we query frozen balances
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// denom specifies frozen balances on a specific denom
	Denom string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryFrozenBalanceRequest) Reset()         { *m = QueryFrozenBalanceRequest{} }
func (m *QueryFrozenBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFrozenBalanceRequest) ProtoMessage()    {}
func (*QueryFrozenBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5e1eecf0acd8ab7, []int{4}
}
func (m *QueryFrozenBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFrozenBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFrozenBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFrozenBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFrozenBalanceRequest.Merge(m, src)
}
func (m *QueryFrozenBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFrozenBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFrozenBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFrozenBalanceRequest proto.InternalMessageInfo

func (m *QueryFrozenBalanceRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *QueryFrozenBalanceRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryFrozenBalanceResponse struct {
	// balance contains the frozen balance with the queried account and denom
	Balance types.Coin `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance"`
}

func (m *QueryFrozenBalanceResponse) Reset()         { *m = QueryFrozenBalanceResponse{} }
func (m *QueryFrozenBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFrozenBalanceResponse) ProtoMessage()    {}
func (*QueryFrozenBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5e1eecf0acd8ab7, []int{5}
}
func (m *QueryFrozenBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFrozenBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFrozenBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFrozenBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFrozenBalanceResponse.Merge(m, src)
}
func (m *QueryFrozenBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFrozenBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFrozenBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFrozenBalanceResponse proto.InternalMessageInfo

func (m *QueryFrozenBalanceResponse) GetBalance() types.Coin {
	if m != nil {
		return m.Balance
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*QueryFungibleTokenRequest)(nil), "coreum.asset.v1.QueryFungibleTokenRequest")
	proto.RegisterType((*QueryFungibleTokenResponse)(nil), "coreum.asset.v1.QueryFungibleTokenResponse")
	proto.RegisterType((*QueryFrozenBalancesRequest)(nil), "coreum.asset.v1.QueryFrozenBalancesRequest")
	proto.RegisterType((*QueryFrozenBalancesResponse)(nil), "coreum.asset.v1.QueryFrozenBalancesResponse")
	proto.RegisterType((*QueryFrozenBalanceRequest)(nil), "coreum.asset.v1.QueryFrozenBalanceRequest")
	proto.RegisterType((*QueryFrozenBalanceResponse)(nil), "coreum.asset.v1.QueryFrozenBalanceResponse")
}

func init() { proto.RegisterFile("coreum/asset/v1/query.proto", fileDescriptor_b5e1eecf0acd8ab7) }

var fileDescriptor_b5e1eecf0acd8ab7 = []byte{
	// 593 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x41, 0x6b, 0x13, 0x41,
	0x14, 0xce, 0xa6, 0xd6, 0xea, 0x94, 0x56, 0x18, 0x7a, 0x48, 0xb7, 0xb2, 0x2d, 0x8b, 0x68, 0x48,
	0x75, 0xa7, 0x89, 0x22, 0x08, 0xc5, 0x43, 0x2a, 0x11, 0xec, 0x45, 0x83, 0x20, 0x78, 0x91, 0xd9,
	0xcd, 0x64, 0x5d, 0x9a, 0xcc, 0xdb, 0x66, 0x66, 0x83, 0xb5, 0xd4, 0x83, 0xbf, 0x40, 0xd0, 0x3f,
	0xa1, 0x07, 0x7f, 0x47, 0x6f, 0x16, 0xbc, 0x78, 0x52, 0x49, 0xfc, 0x17, 0x5e, 0x64, 0x67, 0x67,
	0xd3, 0x5d, 0xbb, 0xa9, 0xc1, 0x53, 0xb2, 0xf9, 0xde, 0x7b, 0xdf, 0xf7, 0xbe, 0xf7, 0x6d, 0xd0,
	0x9a, 0x07, 0x03, 0x16, 0xf5, 0x09, 0x15, 0x82, 0x49, 0x32, 0xac, 0x93, 0xfd, 0x88, 0x0d, 0x0e,
	0x9c, 0x70, 0x00, 0x12, 0xf0, 0x95, 0x04, 0x74, 0x14, 0xe8, 0x0c, 0xeb, 0xe6, 0x8a, 0x0f, 0x3e,
	0x28, 0x8c, 0xc4, 0xdf, 0x92, 0x32, 0xf3, 0xaa, 0x0f, 0xe0, 0xf7, 0x18, 0xa1, 0x61, 0x40, 0x28,
	0xe7, 0x20, 0xa9, 0x0c, 0x80, 0x0b, 0x8d, 0x5a, 0x1e, 0x88, 0x3e, 0x08, 0xe2, 0x52, 0xc1, 0xc8,
	0xb0, 0xee, 0x32, 0x49, 0xeb, 0xc4, 0x83, 0x80, 0x6b, 0xbc, 0x96, 0xc5, 0x15, 0xfb, 0xa4, 0x2a,
	0xa4, 0x7e, 0xc0, 0xd5, 0x30, 0x5d, 0x7b, 0x46, 0x6d, 0xa2, 0x4c, 0x81, 0x76, 0x1d, 0xad, 0x3e,
	0x89, 0xdb, 0x5b, 0x11, 0xf7, 0x03, 0xb7, 0xc7, 0x9e, 0xc2, 0x1e, 0xe3, 0x6d, 0xb6, 0x1f, 0x31,
	0x21, 0xf1, 0x0a, 0x9a, 0xef, 0x30, 0x0e, 0xfd, 0x8a, 0xb1, 0x61, 0x54, 0x2f, 0xb7, 0x93, 0x07,
	0x3b, 0x40, 0x66, 0x51, 0x8b, 0x08, 0x81, 0x0b, 0x86, 0x77, 0xd1, 0x72, 0x57, 0x03, 0x2f, 0x64,
	0x8c, 0xa8, 0xe6, 0xc5, 0x86, 0xe5, 0xfc, 0xe5, 0x8b, 0x93, 0xeb, 0x6f, 0x5e, 0x38, 0xfe, 0xbe,
	0x5e, 0x6a, 0x2f, 0x75, 0xb3, 0x3f, 0xda, 0x6f, 0x52, 0xaa, 0x01, 0xbc, 0x66, 0xbc, 0x49, 0x7b,
	0x94, 0x7b, 0x4c, 0xa4, 0xf2, 0x5a, 0x08, 0x9d, 0x2e, 0xab, 0x69, 0xae, 0x3b, 0x89, 0x33, 0x4e,
	0xec, 0x8c, 0x93, 0xdc, 0x45, 0x3b, 0xe3, 0x3c, 0xa6, 0x3e, 0xd3, 0xbd, 0xed, 0x4c, 0x27, 0xae,
	0xa0, 0x05, 0xea, 0x79, 0x10, 0x71, 0x59, 0x29, 0xab, 0x45, 0xd3, 0x47, 0xfb, 0x8b, 0x81, 0xd6,
	0x0a, 0x05, 0xe8, 0x65, 0x1f, 0x16, 0x28, 0xb8, 0xf1, 0x4f, 0x05, 0x49, 0x73, 0x4e, 0x82, 0x8f,
	0x2e, 0xb9, 0x7a, 0x78, 0xa5, 0xbc, 0x31, 0x57, 0x5d, 0x6c, 0xac, 0xe6, 0xc6, 0xa4, 0x03, 0x76,
	0x20, 0xe0, 0xcd, 0xad, 0xd8, 0xaa, 0x4f, 0x3f, 0xd6, 0xab, 0x7e, 0x20, 0x5f, 0x46, 0xae, 0xe3,
	0x41, 0x9f, 0xe8, 0x3c, 0x24, 0x1f, 0xb7, 0x44, 0x67, 0x8f, 0xc8, 0x83, 0x90, 0x09, 0xd5, 0x20,
	0xda, 0x93, 0xe1, 0xf6, 0x6e, 0x7a, 0xef, 0xec, 0x42, 0xa9, 0xa1, 0x19, 0x23, 0x8c, 0x9c, 0x11,
	0xa7, 0x49, 0x28, 0x67, 0x93, 0xf0, 0xac, 0xe8, 0x3c, 0x13, 0x73, 0xee, 0xa1, 0x05, 0x4d, 0xab,
	0x9d, 0x39, 0x67, 0xa5, 0xe4, 0xfa, 0x69, 0x7d, 0xe3, 0xf7, 0x1c, 0x9a, 0x57, 0x93, 0xf1, 0x07,
	0x03, 0x2d, 0xe5, 0x82, 0x82, 0x6b, 0x67, 0x82, 0x34, 0x35, 0xc0, 0xe6, 0xe6, 0x4c, 0xb5, 0x89,
	0x5e, 0xbb, 0xf6, 0xf6, 0xeb, 0xaf, 0xf7, 0xe5, 0x6b, 0xd8, 0x26, 0x85, 0x2f, 0x8c, 0x20, 0x5d,
	0x49, 0x0e, 0xd5, 0xe2, 0x47, 0xf8, 0xa3, 0x81, 0x96, 0xf3, 0x99, 0xc0, 0xd3, 0xb8, 0x8a, 0xa2,
	0x6b, 0xde, 0x9c, 0xad, 0x58, 0x2b, 0xdb, 0x56, 0xca, 0xee, 0xe2, 0x3b, 0xe7, 0x28, 0x4b, 0x2f,
	0x4c, 0x0e, 0xf5, 0xcd, 0x8e, 0x48, 0x57, 0x4d, 0xc3, 0x9f, 0x63, 0x0b, 0xb3, 0x83, 0xa7, 0x5a,
	0x58, 0x90, 0x09, 0x73, 0x73, 0xa6, 0x5a, 0x2d, 0xf4, 0x81, 0x12, 0x7a, 0x1f, 0x6f, 0xff, 0x8f,
	0xd0, 0xd4, 0xdc, 0xe6, 0xa3, 0xe3, 0x91, 0x65, 0x9c, 0x8c, 0x2c, 0xe3, 0xe7, 0xc8, 0x32, 0xde,
	0x8d, 0xad, 0xd2, 0xc9, 0xd8, 0x2a, 0x7d, 0x1b, 0x5b, 0xa5, 0xe7, 0x5b, 0x99, 0xc4, 0xef, 0x28,
	0x86, 0x16, 0x44, 0xbc, 0xa3, 0xde, 0xa1, 0x94, 0xf2, 0x95, 0x26, 0x55, 0xf9, 0x77, 0x2f, 0xaa,
	0xbf, 0xb9, 0xdb, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x79, 0x31, 0xe9, 0xb3, 0x05, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// FungibleToken queries the fungible token of the module.
	FungibleToken(ctx context.Context, in *QueryFungibleTokenRequest, opts ...grpc.CallOption) (*QueryFungibleTokenResponse, error)
	FrozenBalances(ctx context.Context, in *QueryFrozenBalancesRequest, opts ...grpc.CallOption) (*QueryFrozenBalancesResponse, error)
	FrozenBalance(ctx context.Context, in *QueryFrozenBalanceRequest, opts ...grpc.CallOption) (*QueryFrozenBalanceResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) FungibleToken(ctx context.Context, in *QueryFungibleTokenRequest, opts ...grpc.CallOption) (*QueryFungibleTokenResponse, error) {
	out := new(QueryFungibleTokenResponse)
	err := c.cc.Invoke(ctx, "/coreum.asset.v1.Query/FungibleToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FrozenBalances(ctx context.Context, in *QueryFrozenBalancesRequest, opts ...grpc.CallOption) (*QueryFrozenBalancesResponse, error) {
	out := new(QueryFrozenBalancesResponse)
	err := c.cc.Invoke(ctx, "/coreum.asset.v1.Query/FrozenBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FrozenBalance(ctx context.Context, in *QueryFrozenBalanceRequest, opts ...grpc.CallOption) (*QueryFrozenBalanceResponse, error) {
	out := new(QueryFrozenBalanceResponse)
	err := c.cc.Invoke(ctx, "/coreum.asset.v1.Query/FrozenBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// FungibleToken queries the fungible token of the module.
	FungibleToken(context.Context, *QueryFungibleTokenRequest) (*QueryFungibleTokenResponse, error)
	FrozenBalances(context.Context, *QueryFrozenBalancesRequest) (*QueryFrozenBalancesResponse, error)
	FrozenBalance(context.Context, *QueryFrozenBalanceRequest) (*QueryFrozenBalanceResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) FungibleToken(ctx context.Context, req *QueryFungibleTokenRequest) (*QueryFungibleTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FungibleToken not implemented")
}
func (*UnimplementedQueryServer) FrozenBalances(ctx context.Context, req *QueryFrozenBalancesRequest) (*QueryFrozenBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrozenBalances not implemented")
}
func (*UnimplementedQueryServer) FrozenBalance(ctx context.Context, req *QueryFrozenBalanceRequest) (*QueryFrozenBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrozenBalance not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_FungibleToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFungibleTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FungibleToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coreum.asset.v1.Query/FungibleToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FungibleToken(ctx, req.(*QueryFungibleTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FrozenBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFrozenBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FrozenBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coreum.asset.v1.Query/FrozenBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FrozenBalances(ctx, req.(*QueryFrozenBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FrozenBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFrozenBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FrozenBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coreum.asset.v1.Query/FrozenBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FrozenBalance(ctx, req.(*QueryFrozenBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "coreum.asset.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FungibleToken",
			Handler:    _Query_FungibleToken_Handler,
		},
		{
			MethodName: "FrozenBalances",
			Handler:    _Query_FrozenBalances_Handler,
		},
		{
			MethodName: "FrozenBalance",
			Handler:    _Query_FrozenBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coreum/asset/v1/query.proto",
}

func (m *QueryFungibleTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFungibleTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFungibleTokenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFungibleTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFungibleTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFungibleTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FungibleToken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryFrozenBalancesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFrozenBalancesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFrozenBalancesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFrozenBalancesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFrozenBalancesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFrozenBalancesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Balances) > 0 {
		for iNdEx := len(m.Balances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFrozenBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFrozenBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFrozenBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFrozenBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFrozenBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFrozenBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryFungibleTokenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFungibleTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FungibleToken.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryFrozenBalancesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFrozenBalancesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Balances) > 0 {
		for _, e := range m.Balances {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryFrozenBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFrozenBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Balance.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryFungibleTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFungibleTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFungibleTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFungibleTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFungibleTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFungibleTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FungibleToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FungibleToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFrozenBalancesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFrozenBalancesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFrozenBalancesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFrozenBalancesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFrozenBalancesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFrozenBalancesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, types.Coin{})
			if err := m.Balances[len(m.Balances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFrozenBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFrozenBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFrozenBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFrozenBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFrozenBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFrozenBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
