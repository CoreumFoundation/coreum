// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: coreum/asset/nft/v1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the nftasset module's genesis state.
type GenesisState struct {
	// params defines all the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// class_definitions keep the non-fungible token class definitions state
	ClassDefinitions         []ClassDefinition          `protobuf:"bytes,2,rep,name=class_definitions,json=classDefinitions,proto3" json:"class_definitions"`
	FrozenNFTs               []FrozenNFT                `protobuf:"bytes,3,rep,name=frozen_nfts,json=frozenNfts,proto3" json:"frozen_nfts"`
	WhitelistedNFTAccounts   []WhitelistedNFTAccounts   `protobuf:"bytes,4,rep,name=whitelisted_nft_accounts,json=whitelistedNftAccounts,proto3" json:"whitelisted_nft_accounts"`
	BurntNFTs                []BurntNFT                 `protobuf:"bytes,5,rep,name=burnt_nfts,json=burntNfts,proto3" json:"burnt_nfts"`
	ClassWhitelistedAccounts []ClassWhitelistedAccounts `protobuf:"bytes,6,rep,name=class_whitelisted_accounts,json=classWhitelistedAccounts,proto3" json:"class_whitelisted_accounts"`
	ClassFrozenAccounts      []ClassFrozenAccounts      `protobuf:"bytes,7,rep,name=class_frozen_accounts,json=classFrozenAccounts,proto3" json:"class_frozen_accounts"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_3abcf08d60f6fbfd, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetClassDefinitions() []ClassDefinition {
	if m != nil {
		return m.ClassDefinitions
	}
	return nil
}

func (m *GenesisState) GetFrozenNFTs() []FrozenNFT {
	if m != nil {
		return m.FrozenNFTs
	}
	return nil
}

func (m *GenesisState) GetWhitelistedNFTAccounts() []WhitelistedNFTAccounts {
	if m != nil {
		return m.WhitelistedNFTAccounts
	}
	return nil
}

func (m *GenesisState) GetBurntNFTs() []BurntNFT {
	if m != nil {
		return m.BurntNFTs
	}
	return nil
}

func (m *GenesisState) GetClassWhitelistedAccounts() []ClassWhitelistedAccounts {
	if m != nil {
		return m.ClassWhitelistedAccounts
	}
	return nil
}

func (m *GenesisState) GetClassFrozenAccounts() []ClassFrozenAccounts {
	if m != nil {
		return m.ClassFrozenAccounts
	}
	return nil
}

type FrozenNFT struct {
	ClassID string   `protobuf:"bytes,1,opt,name=classID,proto3" json:"classID,omitempty"`
	NftIDs  []string `protobuf:"bytes,2,rep,name=nftIDs,proto3" json:"nftIDs,omitempty"`
}

func (m *FrozenNFT) Reset()         { *m = FrozenNFT{} }
func (m *FrozenNFT) String() string { return proto.CompactTextString(m) }
func (*FrozenNFT) ProtoMessage()    {}
func (*FrozenNFT) Descriptor() ([]byte, []int) {
	return fileDescriptor_3abcf08d60f6fbfd, []int{1}
}
func (m *FrozenNFT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FrozenNFT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FrozenNFT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FrozenNFT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrozenNFT.Merge(m, src)
}
func (m *FrozenNFT) XXX_Size() int {
	return m.Size()
}
func (m *FrozenNFT) XXX_DiscardUnknown() {
	xxx_messageInfo_FrozenNFT.DiscardUnknown(m)
}

var xxx_messageInfo_FrozenNFT proto.InternalMessageInfo

func (m *FrozenNFT) GetClassID() string {
	if m != nil {
		return m.ClassID
	}
	return ""
}

func (m *FrozenNFT) GetNftIDs() []string {
	if m != nil {
		return m.NftIDs
	}
	return nil
}

type WhitelistedNFTAccounts struct {
	ClassID  string   `protobuf:"bytes,1,opt,name=classID,proto3" json:"classID,omitempty"`
	NftID    string   `protobuf:"bytes,2,opt,name=nftID,proto3" json:"nftID,omitempty"`
	Accounts []string `protobuf:"bytes,4,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (m *WhitelistedNFTAccounts) Reset()         { *m = WhitelistedNFTAccounts{} }
func (m *WhitelistedNFTAccounts) String() string { return proto.CompactTextString(m) }
func (*WhitelistedNFTAccounts) ProtoMessage()    {}
func (*WhitelistedNFTAccounts) Descriptor() ([]byte, []int) {
	return fileDescriptor_3abcf08d60f6fbfd, []int{2}
}
func (m *WhitelistedNFTAccounts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhitelistedNFTAccounts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WhitelistedNFTAccounts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WhitelistedNFTAccounts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhitelistedNFTAccounts.Merge(m, src)
}
func (m *WhitelistedNFTAccounts) XXX_Size() int {
	return m.Size()
}
func (m *WhitelistedNFTAccounts) XXX_DiscardUnknown() {
	xxx_messageInfo_WhitelistedNFTAccounts.DiscardUnknown(m)
}

var xxx_messageInfo_WhitelistedNFTAccounts proto.InternalMessageInfo

func (m *WhitelistedNFTAccounts) GetClassID() string {
	if m != nil {
		return m.ClassID
	}
	return ""
}

func (m *WhitelistedNFTAccounts) GetNftID() string {
	if m != nil {
		return m.NftID
	}
	return ""
}

func (m *WhitelistedNFTAccounts) GetAccounts() []string {
	if m != nil {
		return m.Accounts
	}
	return nil
}

type ClassWhitelistedAccounts struct {
	ClassID  string   `protobuf:"bytes,1,opt,name=classID,proto3" json:"classID,omitempty"`
	Accounts []string `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (m *ClassWhitelistedAccounts) Reset()         { *m = ClassWhitelistedAccounts{} }
func (m *ClassWhitelistedAccounts) String() string { return proto.CompactTextString(m) }
func (*ClassWhitelistedAccounts) ProtoMessage()    {}
func (*ClassWhitelistedAccounts) Descriptor() ([]byte, []int) {
	return fileDescriptor_3abcf08d60f6fbfd, []int{3}
}
func (m *ClassWhitelistedAccounts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClassWhitelistedAccounts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClassWhitelistedAccounts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClassWhitelistedAccounts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClassWhitelistedAccounts.Merge(m, src)
}
func (m *ClassWhitelistedAccounts) XXX_Size() int {
	return m.Size()
}
func (m *ClassWhitelistedAccounts) XXX_DiscardUnknown() {
	xxx_messageInfo_ClassWhitelistedAccounts.DiscardUnknown(m)
}

var xxx_messageInfo_ClassWhitelistedAccounts proto.InternalMessageInfo

func (m *ClassWhitelistedAccounts) GetClassID() string {
	if m != nil {
		return m.ClassID
	}
	return ""
}

func (m *ClassWhitelistedAccounts) GetAccounts() []string {
	if m != nil {
		return m.Accounts
	}
	return nil
}

type ClassFrozenAccounts struct {
	ClassID  string   `protobuf:"bytes,1,opt,name=classID,proto3" json:"classID,omitempty"`
	Accounts []string `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (m *ClassFrozenAccounts) Reset()         { *m = ClassFrozenAccounts{} }
func (m *ClassFrozenAccounts) String() string { return proto.CompactTextString(m) }
func (*ClassFrozenAccounts) ProtoMessage()    {}
func (*ClassFrozenAccounts) Descriptor() ([]byte, []int) {
	return fileDescriptor_3abcf08d60f6fbfd, []int{4}
}
func (m *ClassFrozenAccounts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClassFrozenAccounts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClassFrozenAccounts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClassFrozenAccounts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClassFrozenAccounts.Merge(m, src)
}
func (m *ClassFrozenAccounts) XXX_Size() int {
	return m.Size()
}
func (m *ClassFrozenAccounts) XXX_DiscardUnknown() {
	xxx_messageInfo_ClassFrozenAccounts.DiscardUnknown(m)
}

var xxx_messageInfo_ClassFrozenAccounts proto.InternalMessageInfo

func (m *ClassFrozenAccounts) GetClassID() string {
	if m != nil {
		return m.ClassID
	}
	return ""
}

func (m *ClassFrozenAccounts) GetAccounts() []string {
	if m != nil {
		return m.Accounts
	}
	return nil
}

type BurntNFT struct {
	ClassID string   `protobuf:"bytes,1,opt,name=classID,proto3" json:"classID,omitempty"`
	NftIDs  []string `protobuf:"bytes,2,rep,name=nftIDs,proto3" json:"nftIDs,omitempty"`
}

func (m *BurntNFT) Reset()         { *m = BurntNFT{} }
func (m *BurntNFT) String() string { return proto.CompactTextString(m) }
func (*BurntNFT) ProtoMessage()    {}
func (*BurntNFT) Descriptor() ([]byte, []int) {
	return fileDescriptor_3abcf08d60f6fbfd, []int{5}
}
func (m *BurntNFT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BurntNFT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BurntNFT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BurntNFT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BurntNFT.Merge(m, src)
}
func (m *BurntNFT) XXX_Size() int {
	return m.Size()
}
func (m *BurntNFT) XXX_DiscardUnknown() {
	xxx_messageInfo_BurntNFT.DiscardUnknown(m)
}

var xxx_messageInfo_BurntNFT proto.InternalMessageInfo

func (m *BurntNFT) GetClassID() string {
	if m != nil {
		return m.ClassID
	}
	return ""
}

func (m *BurntNFT) GetNftIDs() []string {
	if m != nil {
		return m.NftIDs
	}
	return nil
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "coreum.asset.nft.v1.GenesisState")
	proto.RegisterType((*FrozenNFT)(nil), "coreum.asset.nft.v1.FrozenNFT")
	proto.RegisterType((*WhitelistedNFTAccounts)(nil), "coreum.asset.nft.v1.WhitelistedNFTAccounts")
	proto.RegisterType((*ClassWhitelistedAccounts)(nil), "coreum.asset.nft.v1.ClassWhitelistedAccounts")
	proto.RegisterType((*ClassFrozenAccounts)(nil), "coreum.asset.nft.v1.ClassFrozenAccounts")
	proto.RegisterType((*BurntNFT)(nil), "coreum.asset.nft.v1.BurntNFT")
}

func init() { proto.RegisterFile("coreum/asset/nft/v1/genesis.proto", fileDescriptor_3abcf08d60f6fbfd) }

var fileDescriptor_3abcf08d60f6fbfd = []byte{
	// 541 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x8d, 0xd3, 0x26, 0xad, 0x27, 0x1c, 0xe8, 0xa6, 0x44, 0x96, 0x51, 0xdd, 0x10, 0x71, 0x88,
	0x84, 0xb0, 0xd5, 0xf6, 0x80, 0x90, 0xe0, 0x80, 0x1b, 0x05, 0x55, 0x48, 0xa1, 0xb8, 0x95, 0x2a,
	0x71, 0x89, 0x1c, 0x67, 0x9d, 0x5a, 0x6a, 0x76, 0x83, 0x77, 0x1d, 0x3e, 0xee, 0xdc, 0xf9, 0x17,
	0xfc, 0x95, 0x1e, 0x7b, 0xe4, 0x54, 0xa1, 0xe4, 0x8f, 0x20, 0xef, 0x3a, 0xc6, 0x2d, 0xeb, 0x4a,
	0xf4, 0xe6, 0x99, 0x79, 0xf3, 0xde, 0xce, 0xbe, 0xf1, 0xc2, 0x93, 0x80, 0xc6, 0x38, 0x99, 0x3a,
	0x3e, 0x63, 0x98, 0x3b, 0x24, 0xe4, 0xce, 0x7c, 0xcf, 0x99, 0x60, 0x82, 0x59, 0xc4, 0xec, 0x59,
	0x4c, 0x39, 0x45, 0x4d, 0x09, 0xb1, 0x05, 0xc4, 0x26, 0x21, 0xb7, 0xe7, 0x7b, 0xe6, 0xf6, 0x84,
	0x4e, 0xa8, 0xa8, 0x3b, 0xe9, 0x97, 0x84, 0x9a, 0x6d, 0x15, 0xdb, 0xcc, 0x8f, 0xfd, 0x69, 0x46,
	0x66, 0xee, 0xa8, 0x10, 0x29, 0xa7, 0x28, 0x77, 0x7e, 0xd6, 0xe0, 0xc1, 0x5b, 0xa9, 0x7e, 0xc2,
	0x7d, 0x8e, 0xd1, 0x4b, 0xa8, 0xcb, 0x7e, 0x43, 0x6b, 0x6b, 0xdd, 0xc6, 0xfe, 0x63, 0x5b, 0x71,
	0x1a, 0xfb, 0x58, 0x40, 0xdc, 0xf5, 0xcb, 0xeb, 0xdd, 0x8a, 0x97, 0x35, 0xa0, 0x33, 0xd8, 0x0a,
	0x2e, 0x7c, 0xc6, 0x86, 0x63, 0x1c, 0x46, 0x24, 0xe2, 0x11, 0x25, 0xcc, 0xa8, 0xb6, 0xd7, 0xba,
	0x8d, 0xfd, 0xa7, 0x4a, 0x96, 0xc3, 0x14, 0xdd, 0xcb, 0xc1, 0x19, 0xdd, 0xc3, 0xe0, 0x66, 0x9a,
	0xa1, 0x13, 0x68, 0x84, 0x31, 0xfd, 0x86, 0xc9, 0x90, 0x84, 0x9c, 0x19, 0x6b, 0x82, 0xd2, 0x52,
	0x52, 0xf6, 0x05, 0x6e, 0xd0, 0x3f, 0x75, 0x51, 0x4a, 0xb6, 0xb8, 0xde, 0x85, 0x3c, 0xc5, 0x3c,
	0x90, 0x34, 0x83, 0x90, 0x33, 0xf4, 0x5d, 0x03, 0xe3, 0xf3, 0x79, 0xc4, 0xf1, 0x45, 0xc4, 0x38,
	0x1e, 0xa7, 0xd4, 0x43, 0x3f, 0x08, 0x68, 0x42, 0x38, 0x33, 0xd6, 0x85, 0xc4, 0x33, 0xa5, 0xc4,
	0xd9, 0xdf, 0xa6, 0x41, 0xff, 0xf4, 0x4d, 0xd6, 0xe2, 0x5a, 0x99, 0x5e, 0x4b, 0x5d, 0xf7, 0x5a,
	0x05, 0xb1, 0x41, 0xc8, 0x57, 0x79, 0xf4, 0x1e, 0x60, 0x94, 0xc4, 0x84, 0xcb, 0xd9, 0x6a, 0x42,
	0x78, 0x47, 0x29, 0xec, 0xa6, 0xb0, 0x74, 0xb4, 0xad, 0x4c, 0x4a, 0x5f, 0x65, 0x98, 0xa7, 0x0b,
	0x0e, 0x31, 0xd8, 0x27, 0x30, 0xa5, 0x0d, 0xc5, 0xe9, 0xf2, 0xc9, 0xea, 0x42, 0xe0, 0x79, 0xb9,
	0x1f, 0x85, 0xe3, 0xe7, 0xb3, 0x49, 0x63, 0x8c, 0xa0, 0xa4, 0x8e, 0x46, 0xf0, 0x48, 0x4a, 0x66,
	0x36, 0xe5, 0x6a, 0x1b, 0x42, 0xad, 0x5b, 0xae, 0x26, 0xcd, 0xb9, 0x25, 0xd4, 0x0c, 0xfe, 0x2d,
	0x75, 0x5e, 0x83, 0x9e, 0x3b, 0x89, 0x0c, 0xd8, 0x10, 0x98, 0xa3, 0x9e, 0x58, 0x53, 0xdd, 0x5b,
	0x85, 0xa8, 0x05, 0x75, 0x12, 0xf2, 0xa3, 0x9e, 0xdc, 0x3c, 0xdd, 0xcb, 0xa2, 0xce, 0x18, 0x4a,
	0x8c, 0xb9, 0x83, 0x6b, 0x1b, 0x6a, 0xa2, 0xdb, 0xa8, 0x8a, 0xbc, 0x0c, 0x90, 0x09, 0x9b, 0x37,
	0xf6, 0x44, 0xf7, 0xf2, 0xb8, 0x73, 0x0c, 0x46, 0xd9, 0x25, 0xde, 0xa1, 0x53, 0x64, 0xac, 0xde,
	0x62, 0x7c, 0x07, 0x4d, 0xc5, 0x45, 0xdd, 0x93, 0xec, 0x15, 0x6c, 0xae, 0x56, 0xe6, 0xff, 0xaf,
	0xd0, 0xfd, 0x70, 0xb9, 0xb0, 0xb4, 0xab, 0x85, 0xa5, 0xfd, 0x5e, 0x58, 0xda, 0x8f, 0xa5, 0x55,
	0xb9, 0x5a, 0x5a, 0x95, 0x5f, 0x4b, 0xab, 0xf2, 0xf1, 0xc5, 0x24, 0xe2, 0xe7, 0xc9, 0xc8, 0x0e,
	0xe8, 0xd4, 0x39, 0x14, 0x56, 0xf7, 0x69, 0x42, 0xc6, 0x7e, 0xfa, 0xfb, 0x3a, 0xd9, 0x03, 0x34,
	0x3f, 0x70, 0xbe, 0x14, 0x5e, 0x21, 0xfe, 0x75, 0x86, 0xd9, 0xa8, 0x2e, 0x5e, 0xa1, 0x83, 0x3f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xc5, 0x38, 0x7d, 0x87, 0x16, 0x05, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClassFrozenAccounts) > 0 {
		for iNdEx := len(m.ClassFrozenAccounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClassFrozenAccounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.ClassWhitelistedAccounts) > 0 {
		for iNdEx := len(m.ClassWhitelistedAccounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClassWhitelistedAccounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.BurntNFTs) > 0 {
		for iNdEx := len(m.BurntNFTs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BurntNFTs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.WhitelistedNFTAccounts) > 0 {
		for iNdEx := len(m.WhitelistedNFTAccounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WhitelistedNFTAccounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.FrozenNFTs) > 0 {
		for iNdEx := len(m.FrozenNFTs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FrozenNFTs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ClassDefinitions) > 0 {
		for iNdEx := len(m.ClassDefinitions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClassDefinitions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FrozenNFT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrozenNFT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FrozenNFT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftIDs) > 0 {
		for iNdEx := len(m.NftIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NftIDs[iNdEx])
			copy(dAtA[i:], m.NftIDs[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.NftIDs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ClassID) > 0 {
		i -= len(m.ClassID)
		copy(dAtA[i:], m.ClassID)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ClassID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WhitelistedNFTAccounts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhitelistedNFTAccounts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhitelistedNFTAccounts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Accounts[iNdEx])
			copy(dAtA[i:], m.Accounts[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.Accounts[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.NftID) > 0 {
		i -= len(m.NftID)
		copy(dAtA[i:], m.NftID)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.NftID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClassID) > 0 {
		i -= len(m.ClassID)
		copy(dAtA[i:], m.ClassID)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ClassID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClassWhitelistedAccounts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClassWhitelistedAccounts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClassWhitelistedAccounts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Accounts[iNdEx])
			copy(dAtA[i:], m.Accounts[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.Accounts[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ClassID) > 0 {
		i -= len(m.ClassID)
		copy(dAtA[i:], m.ClassID)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ClassID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClassFrozenAccounts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClassFrozenAccounts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClassFrozenAccounts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Accounts[iNdEx])
			copy(dAtA[i:], m.Accounts[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.Accounts[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ClassID) > 0 {
		i -= len(m.ClassID)
		copy(dAtA[i:], m.ClassID)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ClassID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BurntNFT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BurntNFT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BurntNFT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftIDs) > 0 {
		for iNdEx := len(m.NftIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NftIDs[iNdEx])
			copy(dAtA[i:], m.NftIDs[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.NftIDs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ClassID) > 0 {
		i -= len(m.ClassID)
		copy(dAtA[i:], m.ClassID)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ClassID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.ClassDefinitions) > 0 {
		for _, e := range m.ClassDefinitions {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.FrozenNFTs) > 0 {
		for _, e := range m.FrozenNFTs {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.WhitelistedNFTAccounts) > 0 {
		for _, e := range m.WhitelistedNFTAccounts {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BurntNFTs) > 0 {
		for _, e := range m.BurntNFTs {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ClassWhitelistedAccounts) > 0 {
		for _, e := range m.ClassWhitelistedAccounts {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ClassFrozenAccounts) > 0 {
		for _, e := range m.ClassFrozenAccounts {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *FrozenNFT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassID)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.NftIDs) > 0 {
		for _, s := range m.NftIDs {
			l = len(s)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *WhitelistedNFTAccounts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassID)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.NftID)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.Accounts) > 0 {
		for _, s := range m.Accounts {
			l = len(s)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *ClassWhitelistedAccounts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassID)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.Accounts) > 0 {
		for _, s := range m.Accounts {
			l = len(s)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *ClassFrozenAccounts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassID)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.Accounts) > 0 {
		for _, s := range m.Accounts {
			l = len(s)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *BurntNFT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassID)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.NftIDs) > 0 {
		for _, s := range m.NftIDs {
			l = len(s)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassDefinitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassDefinitions = append(m.ClassDefinitions, ClassDefinition{})
			if err := m.ClassDefinitions[len(m.ClassDefinitions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrozenNFTs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrozenNFTs = append(m.FrozenNFTs, FrozenNFT{})
			if err := m.FrozenNFTs[len(m.FrozenNFTs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistedNFTAccounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhitelistedNFTAccounts = append(m.WhitelistedNFTAccounts, WhitelistedNFTAccounts{})
			if err := m.WhitelistedNFTAccounts[len(m.WhitelistedNFTAccounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurntNFTs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BurntNFTs = append(m.BurntNFTs, BurntNFT{})
			if err := m.BurntNFTs[len(m.BurntNFTs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassWhitelistedAccounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassWhitelistedAccounts = append(m.ClassWhitelistedAccounts, ClassWhitelistedAccounts{})
			if err := m.ClassWhitelistedAccounts[len(m.ClassWhitelistedAccounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassFrozenAccounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassFrozenAccounts = append(m.ClassFrozenAccounts, ClassFrozenAccounts{})
			if err := m.ClassFrozenAccounts[len(m.ClassFrozenAccounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrozenNFT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrozenNFT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrozenNFT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftIDs = append(m.NftIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhitelistedNFTAccounts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhitelistedNFTAccounts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhitelistedNFTAccounts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClassWhitelistedAccounts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClassWhitelistedAccounts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClassWhitelistedAccounts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClassFrozenAccounts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClassFrozenAccounts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClassFrozenAccounts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BurntNFT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BurntNFT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BurntNFT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftIDs = append(m.NftIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
