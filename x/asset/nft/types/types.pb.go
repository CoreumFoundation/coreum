// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: coreum/asset/nft/v1/types.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DataModificationType defines possible data modification types.
type DataModificationType int32

const (
	// only issuer can update
	DataModificationType_issuer DataModificationType = 0
	// only owner can update
	DataModificationType_owner DataModificationType = 1
)

var DataModificationType_name = map[int32]string{
	0: "issuer",
	1: "owner",
}

var DataModificationType_value = map[string]int32{
	"issuer": 0,
	"owner":  1,
}

func (x DataModificationType) String() string {
	return proto.EnumName(DataModificationType_name, int32(x))
}

func (DataModificationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3ee3ca6de043c159, []int{0}
}

// DataBytes represent the data which can't be updated.
type DataBytes struct {
	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *DataBytes) Reset()         { *m = DataBytes{} }
func (m *DataBytes) String() string { return proto.CompactTextString(m) }
func (*DataBytes) ProtoMessage()    {}
func (*DataBytes) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ee3ca6de043c159, []int{0}
}
func (m *DataBytes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataBytes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataBytes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataBytes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataBytes.Merge(m, src)
}
func (m *DataBytes) XXX_Size() int {
	return m.Size()
}
func (m *DataBytes) XXX_DiscardUnknown() {
	xxx_messageInfo_DataBytes.DiscardUnknown(m)
}

var xxx_messageInfo_DataBytes proto.InternalMessageInfo

// DataDynamicItem contains the updatable data and modification types.
type DataDynamicItem struct {
	// contains the set of the modification types, if empty no one can update.
	Types []DataModificationType `protobuf:"varint,1,rep,packed,name=types,proto3,enum=coreum.asset.nft.v1.DataModificationType" json:"types,omitempty"`
	Data  []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *DataDynamicItem) Reset()         { *m = DataDynamicItem{} }
func (m *DataDynamicItem) String() string { return proto.CompactTextString(m) }
func (*DataDynamicItem) ProtoMessage()    {}
func (*DataDynamicItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ee3ca6de043c159, []int{1}
}
func (m *DataDynamicItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataDynamicItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataDynamicItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataDynamicItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataDynamicItem.Merge(m, src)
}
func (m *DataDynamicItem) XXX_Size() int {
	return m.Size()
}
func (m *DataDynamicItem) XXX_DiscardUnknown() {
	xxx_messageInfo_DataDynamicItem.DiscardUnknown(m)
}

var xxx_messageInfo_DataDynamicItem proto.InternalMessageInfo

// DataDynamicIndexed contains the data and it's index in the DataDynamic.
type DataDynamicIndexedItem struct {
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Data  []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *DataDynamicIndexedItem) Reset()         { *m = DataDynamicIndexedItem{} }
func (m *DataDynamicIndexedItem) String() string { return proto.CompactTextString(m) }
func (*DataDynamicIndexedItem) ProtoMessage()    {}
func (*DataDynamicIndexedItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ee3ca6de043c159, []int{2}
}
func (m *DataDynamicIndexedItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataDynamicIndexedItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataDynamicIndexedItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataDynamicIndexedItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataDynamicIndexedItem.Merge(m, src)
}
func (m *DataDynamicIndexedItem) XXX_Size() int {
	return m.Size()
}
func (m *DataDynamicIndexedItem) XXX_DiscardUnknown() {
	xxx_messageInfo_DataDynamicIndexedItem.DiscardUnknown(m)
}

var xxx_messageInfo_DataDynamicIndexedItem proto.InternalMessageInfo

// DataDynamic is dynamic data which contains the list of the items allowed to be modified base on their modification types.
type DataDynamic struct {
	Items []*DataDynamicItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *DataDynamic) Reset()         { *m = DataDynamic{} }
func (m *DataDynamic) String() string { return proto.CompactTextString(m) }
func (*DataDynamic) ProtoMessage()    {}
func (*DataDynamic) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ee3ca6de043c159, []int{3}
}
func (m *DataDynamic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataDynamic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataDynamic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataDynamic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataDynamic.Merge(m, src)
}
func (m *DataDynamic) XXX_Size() int {
	return m.Size()
}
func (m *DataDynamic) XXX_DiscardUnknown() {
	xxx_messageInfo_DataDynamic.DiscardUnknown(m)
}

var xxx_messageInfo_DataDynamic proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("coreum.asset.nft.v1.DataModificationType", DataModificationType_name, DataModificationType_value)
	proto.RegisterType((*DataBytes)(nil), "coreum.asset.nft.v1.DataBytes")
	proto.RegisterType((*DataDynamicItem)(nil), "coreum.asset.nft.v1.DataDynamicItem")
	proto.RegisterType((*DataDynamicIndexedItem)(nil), "coreum.asset.nft.v1.DataDynamicIndexedItem")
	proto.RegisterType((*DataDynamic)(nil), "coreum.asset.nft.v1.DataDynamic")
}

func init() { proto.RegisterFile("coreum/asset/nft/v1/types.proto", fileDescriptor_3ee3ca6de043c159) }

var fileDescriptor_3ee3ca6de043c159 = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0xc6, 0x63, 0x20, 0x95, 0x7a, 0xe5, 0x4f, 0x65, 0x2a, 0x54, 0x31, 0xb8, 0x55, 0xc5, 0x50,
	0x90, 0xb0, 0xd5, 0x82, 0x84, 0xc4, 0x82, 0x54, 0x2a, 0xa4, 0x0e, 0x2c, 0x11, 0x2c, 0x6c, 0x69,
	0xe2, 0x14, 0x0f, 0xb1, 0xab, 0xc4, 0x29, 0xcd, 0x5b, 0xf0, 0x58, 0x1d, 0x3b, 0x32, 0x42, 0xfb,
	0x22, 0xc8, 0x36, 0x43, 0x86, 0x32, 0xe5, 0x4e, 0xb9, 0xfb, 0x7e, 0xdf, 0xf9, 0x83, 0x4e, 0xa4,
	0x32, 0x5e, 0xa4, 0x2c, 0xcc, 0x73, 0xae, 0x99, 0x4c, 0x34, 0x5b, 0x0c, 0x98, 0x2e, 0xe7, 0x3c,
	0xa7, 0xf3, 0x4c, 0x69, 0x85, 0x4f, 0xdd, 0x00, 0xb5, 0x03, 0x54, 0x26, 0x9a, 0x2e, 0x06, 0xe7,
	0xad, 0x99, 0x9a, 0x29, 0xfb, 0x9f, 0x99, 0xca, 0x8d, 0xf6, 0x3a, 0x50, 0x1f, 0x87, 0x3a, 0x1c,
	0x95, 0x9a, 0xe7, 0x18, 0xc3, 0x81, 0x69, 0xda, 0xa8, 0x8b, 0xfa, 0x87, 0x81, 0xad, 0x7b, 0x09,
	0x9c, 0x98, 0xef, 0xb8, 0x94, 0x61, 0x2a, 0xa2, 0x89, 0xe6, 0x29, 0x7e, 0x00, 0xdf, 0xd2, 0xda,
	0xa8, 0xbb, 0xdf, 0x3f, 0x1e, 0x5e, 0xd2, 0x1d, 0x38, 0x6a, 0x96, 0x9e, 0x55, 0x2c, 0x12, 0x11,
	0x85, 0x5a, 0x28, 0xf9, 0x52, 0xce, 0x79, 0xe0, 0xf6, 0x0c, 0x27, 0x36, 0x9c, 0x3d, 0xc7, 0x31,
	0x75, 0x6f, 0x04, 0x67, 0x55, 0x8e, 0x8c, 0xf9, 0x92, 0xc7, 0x16, 0xd7, 0x02, 0x5f, 0x98, 0xd6,
	0xda, 0x3a, 0x0a, 0x5c, 0xb3, 0x53, 0x63, 0x02, 0x8d, 0x8a, 0x06, 0xbe, 0x07, 0x5f, 0x68, 0x9e,
	0x3a, 0x9f, 0x8d, 0xe1, 0xc5, 0xbf, 0x3e, 0x2b, 0xc7, 0x05, 0x6e, 0xe5, 0xea, 0x1a, 0x5a, 0xbb,
	0x2e, 0xc0, 0x00, 0x35, 0x91, 0xe7, 0x05, 0xcf, 0x9a, 0x1e, 0xae, 0x83, 0xaf, 0x3e, 0x24, 0xcf,
	0x9a, 0x68, 0xf4, 0xba, 0xfa, 0x21, 0xde, 0x6a, 0x43, 0xd0, 0x7a, 0x43, 0xd0, 0xf7, 0x86, 0xa0,
	0xcf, 0x2d, 0xf1, 0xd6, 0x5b, 0xe2, 0x7d, 0x6d, 0x89, 0xf7, 0x76, 0x37, 0x13, 0xfa, 0xbd, 0x98,
	0xd2, 0x48, 0xa5, 0xec, 0xd1, 0x7a, 0x78, 0x52, 0x85, 0x8c, 0xad, 0x2a, 0xfb, 0x0b, 0x73, 0x71,
	0xcb, 0x96, 0x95, 0x44, 0xed, 0x43, 0x4d, 0x6b, 0x36, 0xa4, 0x9b, 0xdf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x59, 0xa0, 0xa8, 0x64, 0xf2, 0x01, 0x00, 0x00,
}

func (m *DataBytes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataBytes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataBytes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DataDynamicItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataDynamicItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataDynamicItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Types) > 0 {
		dAtA2 := make([]byte, len(m.Types)*10)
		var j1 int
		for _, num := range m.Types {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTypes(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DataDynamicIndexedItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataDynamicIndexedItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataDynamicIndexedItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DataDynamic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataDynamic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataDynamic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DataBytes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DataDynamicItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Types) > 0 {
		l = 0
		for _, e := range m.Types {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DataDynamicIndexedItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovTypes(uint64(m.Index))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DataDynamic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DataBytes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataBytes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataBytes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataDynamicItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataDynamicItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataDynamicItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v DataModificationType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= DataModificationType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Types = append(m.Types, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Types) == 0 {
					m.Types = make([]DataModificationType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v DataModificationType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= DataModificationType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Types = append(m.Types, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataDynamicIndexedItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataDynamicIndexedItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataDynamicIndexedItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataDynamic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataDynamic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataDynamic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &DataDynamicItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
