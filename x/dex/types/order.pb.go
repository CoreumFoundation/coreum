// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: coreum/dex/v1/order.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Side is order side.
type Side int32

const (
	// SIDE_UNSPECIFIED reserves the default value, to protect against unexpected settings.
	SIDE_UNSPECIFIED Side = 0
	// SIDE_BUY means that the order is to buy base_denom quantity with the price.
	SIDE_BUY Side = 1
	// SIDE_SELL means that the order is to sell base_denom quantity with the price.
	SIDE_SELL Side = 2
)

var Side_name = map[int32]string{
	0: "SIDE_UNSPECIFIED",
	1: "SIDE_BUY",
	2: "SIDE_SELL",
}

var Side_value = map[string]int32{
	"SIDE_UNSPECIFIED": 0,
	"SIDE_BUY":         1,
	"SIDE_SELL":        2,
}

func (x Side) String() string {
	return proto.EnumName(Side_name, int32(x))
}

func (Side) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_302bb6c9a553771c, []int{0}
}

// Type is order type.
type OrderType int32

const (
	// order_type_unspecified reserves the default value, to protect against unexpected settings.
	ORDER_TYPE_UNSPECIFIED OrderType = 0
	// order_type_limit means that the order is limit order.
	ORDER_TYPE_LIMIT OrderType = 1
	// limit order_type_market that the order is market order.
	ORDER_TYPE_MARKET OrderType = 2
)

var OrderType_name = map[int32]string{
	0: "ORDER_TYPE_UNSPECIFIED",
	1: "ORDER_TYPE_LIMIT",
	2: "ORDER_TYPE_MARKET",
}

var OrderType_value = map[string]int32{
	"ORDER_TYPE_UNSPECIFIED": 0,
	"ORDER_TYPE_LIMIT":       1,
	"ORDER_TYPE_MARKET":      2,
}

func (x OrderType) String() string {
	return proto.EnumName(OrderType_name, int32(x))
}

func (OrderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_302bb6c9a553771c, []int{1}
}

// GoodTil is a good til order settings.
type GoodTil struct {
	// good_til_block_height means that order remains active until a specific blockchain block height is reached.
	GoodTilBlockHeight uint64 `protobuf:"varint,1,opt,name=good_til_block_height,json=goodTilBlockHeight,proto3" json:"good_til_block_height,omitempty"`
}

func (m *GoodTil) Reset()         { *m = GoodTil{} }
func (m *GoodTil) String() string { return proto.CompactTextString(m) }
func (*GoodTil) ProtoMessage()    {}
func (*GoodTil) Descriptor() ([]byte, []int) {
	return fileDescriptor_302bb6c9a553771c, []int{0}
}
func (m *GoodTil) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoodTil) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoodTil.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoodTil) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoodTil.Merge(m, src)
}
func (m *GoodTil) XXX_Size() int {
	return m.Size()
}
func (m *GoodTil) XXX_DiscardUnknown() {
	xxx_messageInfo_GoodTil.DiscardUnknown(m)
}

var xxx_messageInfo_GoodTil proto.InternalMessageInfo

// CancelGoodTil is a cancel good til message for the delay router.
type CancelGoodTil struct {
	// creator is order creator address.
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// order_id is order ID.
	OrderID string `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (m *CancelGoodTil) Reset()         { *m = CancelGoodTil{} }
func (m *CancelGoodTil) String() string { return proto.CompactTextString(m) }
func (*CancelGoodTil) ProtoMessage()    {}
func (*CancelGoodTil) Descriptor() ([]byte, []int) {
	return fileDescriptor_302bb6c9a553771c, []int{1}
}
func (m *CancelGoodTil) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelGoodTil) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelGoodTil.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelGoodTil) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelGoodTil.Merge(m, src)
}
func (m *CancelGoodTil) XXX_Size() int {
	return m.Size()
}
func (m *CancelGoodTil) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelGoodTil.DiscardUnknown(m)
}

var xxx_messageInfo_CancelGoodTil proto.InternalMessageInfo

// Order is a DEX order.
type Order struct {
	// creator is order creator address.
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// type is order type.
	Type OrderType `protobuf:"varint,2,opt,name=type,proto3,enum=coreum.dex.v1.OrderType" json:"type,omitempty"`
	// id is unique order ID.
	ID string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// base_denom is base order denom.
	BaseDenom string `protobuf:"bytes,4,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	// quote_denom is quote order denom
	QuoteDenom string `protobuf:"bytes,5,opt,name=quote_denom,json=quoteDenom,proto3" json:"quote_denom,omitempty"`
	// price is value of one unit of the base_denom expressed in terms of the quote_denom.
	Price *Price `protobuf:"bytes,6,opt,name=price,proto3,customtype=Price" json:"price,omitempty"`
	// quantity is amount of the base base_denom being traded.
	Quantity cosmossdk_io_math.Int `protobuf:"bytes,7,opt,name=quantity,proto3,customtype=cosmossdk.io/math.Int" json:"quantity"`
	// side is order side.
	Side Side `protobuf:"varint,8,opt,name=side,proto3,enum=coreum.dex.v1.Side" json:"side,omitempty"`
	// remaining_quantity is remaining filling quantity sell/buy.
	RemainingQuantity cosmossdk_io_math.Int `protobuf:"bytes,9,opt,name=remaining_quantity,json=remainingQuantity,proto3,customtype=cosmossdk.io/math.Int" json:"remaining_quantity"`
	// remaining_balance is remaining order balance.
	RemainingBalance cosmossdk_io_math.Int `protobuf:"bytes,10,opt,name=remaining_balance,json=remainingBalance,proto3,customtype=cosmossdk.io/math.Int" json:"remaining_balance"`
	// good_til is order good til
	GoodTil *GoodTil `protobuf:"bytes,11,opt,name=good_til,json=goodTil,proto3" json:"good_til,omitempty"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_302bb6c9a553771c, []int{2}
}
func (m *Order) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Order.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(m, src)
}
func (m *Order) XXX_Size() int {
	return m.Size()
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

// OrderData is a order data used for the store.
type OrderData struct {
	// order_book_id is order book ID.
	OrderBookID uint32 `protobuf:"varint,1,opt,name=order_book_id,json=orderBookId,proto3" json:"order_book_id,omitempty"`
	// price is value of one unit of the base_denom expressed in terms of the quote_denom.
	Price Price `protobuf:"bytes,2,opt,name=price,proto3,customtype=Price" json:"price"`
	// quantity is amount of the base base_denom being traded.
	Quantity cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=quantity,proto3,customtype=cosmossdk.io/math.Int" json:"quantity"`
	// side is order side.
	Side Side `protobuf:"varint,4,opt,name=side,proto3,enum=coreum.dex.v1.Side" json:"side,omitempty"`
	// good_til is order good til
	GoodTil *GoodTil `protobuf:"bytes,9,opt,name=good_til,json=goodTil,proto3" json:"good_til,omitempty"`
}

func (m *OrderData) Reset()         { *m = OrderData{} }
func (m *OrderData) String() string { return proto.CompactTextString(m) }
func (*OrderData) ProtoMessage()    {}
func (*OrderData) Descriptor() ([]byte, []int) {
	return fileDescriptor_302bb6c9a553771c, []int{3}
}
func (m *OrderData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderData.Merge(m, src)
}
func (m *OrderData) XXX_Size() int {
	return m.Size()
}
func (m *OrderData) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderData.DiscardUnknown(m)
}

var xxx_messageInfo_OrderData proto.InternalMessageInfo

// OrderBookData is a order book data used by order for the store.
type OrderBookData struct {
	// base_denom is base order book denom.
	BaseDenom string `protobuf:"bytes,1,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	// quote_denom is quote order book denom
	QuoteDenom string `protobuf:"bytes,2,opt,name=quote_denom,json=quoteDenom,proto3" json:"quote_denom,omitempty"`
}

func (m *OrderBookData) Reset()         { *m = OrderBookData{} }
func (m *OrderBookData) String() string { return proto.CompactTextString(m) }
func (*OrderBookData) ProtoMessage()    {}
func (*OrderBookData) Descriptor() ([]byte, []int) {
	return fileDescriptor_302bb6c9a553771c, []int{4}
}
func (m *OrderBookData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderBookData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderBookData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderBookData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderBookData.Merge(m, src)
}
func (m *OrderBookData) XXX_Size() int {
	return m.Size()
}
func (m *OrderBookData) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderBookData.DiscardUnknown(m)
}

var xxx_messageInfo_OrderBookData proto.InternalMessageInfo

// OrderBookRecord is a single order book record.
type OrderBookRecord struct {
	// order_book_id is order book ID.
	OrderBookID uint32 `protobuf:"varint,1,opt,name=order_book_id,json=orderBookId,proto3" json:"order_book_id,omitempty"`
	// side is order side.
	Side Side `protobuf:"varint,2,opt,name=side,proto3,enum=coreum.dex.v1.Side" json:"side,omitempty"`
	// price is order book record price.
	Price Price `protobuf:"bytes,3,opt,name=price,proto3,customtype=Price" json:"price"`
	// order_seq is order sequence.
	OrderSeq uint64 `protobuf:"varint,4,opt,name=order_seq,json=orderSeq,proto3" json:"order_seq,omitempty"`
	// order ID provided by the creator.
	OrderID string `protobuf:"bytes,5,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// account_number is account number which corresponds the order creator.
	AccountNumber uint64 `protobuf:"varint,6,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	// remaining_quantity is remaining filling quantity sell/buy.
	RemainingQuantity cosmossdk_io_math.Int `protobuf:"bytes,7,opt,name=remaining_quantity,json=remainingQuantity,proto3,customtype=cosmossdk.io/math.Int" json:"remaining_quantity"`
	// remaining_balance is remaining order balance.
	RemainingBalance cosmossdk_io_math.Int `protobuf:"bytes,8,opt,name=remaining_balance,json=remainingBalance,proto3,customtype=cosmossdk.io/math.Int" json:"remaining_balance"`
}

func (m *OrderBookRecord) Reset()         { *m = OrderBookRecord{} }
func (m *OrderBookRecord) String() string { return proto.CompactTextString(m) }
func (*OrderBookRecord) ProtoMessage()    {}
func (*OrderBookRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_302bb6c9a553771c, []int{5}
}
func (m *OrderBookRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderBookRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderBookRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderBookRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderBookRecord.Merge(m, src)
}
func (m *OrderBookRecord) XXX_Size() int {
	return m.Size()
}
func (m *OrderBookRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderBookRecord.DiscardUnknown(m)
}

var xxx_messageInfo_OrderBookRecord proto.InternalMessageInfo

// OrderBookRecordData is a single order book record used for the store.
type OrderBookRecordData struct {
	// order ID provided by the creator.
	OrderID string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// account_number is account number which corresponds the order creator.
	AccountNumber uint64 `protobuf:"varint,2,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	// remaining_quantity is remaining filling quantity sell/buy.
	RemainingQuantity cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=remaining_quantity,json=remainingQuantity,proto3,customtype=cosmossdk.io/math.Int" json:"remaining_quantity"`
	// remaining_balance is remaining order balance.
	RemainingBalance cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=remaining_balance,json=remainingBalance,proto3,customtype=cosmossdk.io/math.Int" json:"remaining_balance"`
}

func (m *OrderBookRecordData) Reset()         { *m = OrderBookRecordData{} }
func (m *OrderBookRecordData) String() string { return proto.CompactTextString(m) }
func (*OrderBookRecordData) ProtoMessage()    {}
func (*OrderBookRecordData) Descriptor() ([]byte, []int) {
	return fileDescriptor_302bb6c9a553771c, []int{6}
}
func (m *OrderBookRecordData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderBookRecordData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderBookRecordData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderBookRecordData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderBookRecordData.Merge(m, src)
}
func (m *OrderBookRecordData) XXX_Size() int {
	return m.Size()
}
func (m *OrderBookRecordData) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderBookRecordData.DiscardUnknown(m)
}

var xxx_messageInfo_OrderBookRecordData proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("coreum.dex.v1.Side", Side_name, Side_value)
	proto.RegisterEnum("coreum.dex.v1.OrderType", OrderType_name, OrderType_value)
	proto.RegisterType((*GoodTil)(nil), "coreum.dex.v1.GoodTil")
	proto.RegisterType((*CancelGoodTil)(nil), "coreum.dex.v1.CancelGoodTil")
	proto.RegisterType((*Order)(nil), "coreum.dex.v1.Order")
	proto.RegisterType((*OrderData)(nil), "coreum.dex.v1.OrderData")
	proto.RegisterType((*OrderBookData)(nil), "coreum.dex.v1.OrderBookData")
	proto.RegisterType((*OrderBookRecord)(nil), "coreum.dex.v1.OrderBookRecord")
	proto.RegisterType((*OrderBookRecordData)(nil), "coreum.dex.v1.OrderBookRecordData")
}

func init() { proto.RegisterFile("coreum/dex/v1/order.proto", fileDescriptor_302bb6c9a553771c) }

var fileDescriptor_302bb6c9a553771c = []byte{
	// 791 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x41, 0x6f, 0xe2, 0x46,
	0x14, 0xc6, 0xc6, 0x04, 0xfc, 0xa8, 0x77, 0xd9, 0xd9, 0x24, 0x72, 0x53, 0xad, 0x59, 0x51, 0xb5,
	0x5d, 0xad, 0x2a, 0x5b, 0xec, 0xf6, 0x52, 0xa9, 0x52, 0x55, 0x62, 0xb6, 0x75, 0x4b, 0x42, 0x32,
	0x90, 0x43, 0x72, 0xb1, 0x8c, 0x67, 0x04, 0x16, 0xe0, 0x01, 0x63, 0xa2, 0xe4, 0x1f, 0xf4, 0xd8,
	0x73, 0xaf, 0xfd, 0x33, 0x39, 0xe6, 0x58, 0xe5, 0x80, 0x5a, 0xf2, 0x2b, 0x2a, 0x55, 0x55, 0xe5,
	0x31, 0x76, 0x09, 0x52, 0x12, 0x8a, 0x72, 0xb3, 0xbf, 0xf7, 0xe6, 0xbd, 0x79, 0xdf, 0xfb, 0xde,
	0x1b, 0xf8, 0xd8, 0x65, 0x01, 0x9d, 0x0e, 0x0d, 0x42, 0x2f, 0x8c, 0xf3, 0xaa, 0xc1, 0x02, 0x42,
	0x03, 0x7d, 0x14, 0xb0, 0x90, 0x21, 0x25, 0x36, 0xe9, 0x84, 0x5e, 0xe8, 0xe7, 0xd5, 0xbd, 0xed,
	0x2e, 0xeb, 0x32, 0x6e, 0x31, 0xa2, 0xaf, 0xd8, 0xa9, 0xf2, 0x0d, 0xe4, 0xbf, 0x67, 0x8c, 0xb4,
	0xbd, 0x01, 0xaa, 0xc2, 0x4e, 0x97, 0x31, 0x62, 0x87, 0xde, 0xc0, 0xee, 0x0c, 0x98, 0xdb, 0xb7,
	0x7b, 0xd4, 0xeb, 0xf6, 0x42, 0x55, 0x78, 0x2d, 0xbc, 0x91, 0x30, 0xea, 0xc6, 0x7e, 0xb5, 0xc8,
	0xf4, 0x03, 0xb7, 0x54, 0x8e, 0x41, 0xd9, 0x77, 0x7c, 0x97, 0x0e, 0x92, 0x18, 0x2a, 0xe4, 0xdd,
	0x80, 0x3a, 0x21, 0x0b, 0xf8, 0x29, 0x19, 0x27, 0xbf, 0xe8, 0x73, 0x28, 0xf0, 0xcb, 0xd9, 0x1e,
	0x51, 0xc5, 0xc8, 0x54, 0x2b, 0xce, 0x67, 0xe5, 0x7c, 0x33, 0xc2, 0x2c, 0x13, 0xe7, 0xb9, 0xd1,
	0x22, 0x95, 0xbf, 0xb2, 0x90, 0xe3, 0xe0, 0x03, 0xb1, 0xbe, 0x04, 0x29, 0xbc, 0x1c, 0x51, 0x1e,
	0xe7, 0xd9, 0x3b, 0x55, 0xbf, 0x53, 0xa8, 0xce, 0x4f, 0xb7, 0x2f, 0x47, 0x14, 0x73, 0x2f, 0xb4,
	0x0b, 0xa2, 0x47, 0xd4, 0x2c, 0xcf, 0xb9, 0x35, 0x9f, 0x95, 0x45, 0xcb, 0xc4, 0xa2, 0x47, 0xd0,
	0x2b, 0x80, 0x8e, 0x33, 0xa1, 0x36, 0xa1, 0x3e, 0x1b, 0xaa, 0x12, 0x4f, 0x21, 0x47, 0x88, 0x19,
	0x01, 0xa8, 0x0c, 0xc5, 0xf1, 0x94, 0x85, 0x89, 0x3d, 0xc7, 0xed, 0xc0, 0xa1, 0xc4, 0x21, 0x37,
	0x0a, 0x3c, 0x97, 0xaa, 0x5b, 0x3c, 0xb4, 0x7c, 0x33, 0x2b, 0xe7, 0x8e, 0x22, 0x00, 0xc7, 0x38,
	0xfa, 0x1a, 0x0a, 0xe3, 0xa9, 0xe3, 0x87, 0x5e, 0x78, 0xa9, 0xe6, 0xb9, 0xcf, 0xab, 0xab, 0x59,
	0x39, 0x73, 0x33, 0x2b, 0xef, 0xb8, 0x6c, 0x32, 0x64, 0x93, 0x09, 0xe9, 0xeb, 0x1e, 0x33, 0x86,
	0x4e, 0xd8, 0xd3, 0x2d, 0x3f, 0xc4, 0xa9, 0x3b, 0xfa, 0x02, 0xa4, 0x89, 0x47, 0xa8, 0x5a, 0xe0,
	0x15, 0xbe, 0x5c, 0xa9, 0xb0, 0xe5, 0x11, 0x8a, 0xb9, 0x03, 0x6a, 0x00, 0x0a, 0xe8, 0xd0, 0xf1,
	0x7c, 0xcf, 0xef, 0xda, 0x69, 0x36, 0x79, 0x9d, 0x6c, 0x2f, 0xd2, 0x83, 0xc7, 0x49, 0xda, 0x1f,
	0xe1, 0x3f, 0xd0, 0xee, 0x38, 0x83, 0xa8, 0xb7, 0x2a, 0xac, 0x13, 0xac, 0x94, 0x9e, 0xab, 0xc5,
	0xc7, 0x50, 0x15, 0x0a, 0x89, 0x9c, 0xd4, 0xe2, 0x6b, 0xe1, 0x4d, 0xf1, 0xdd, 0xee, 0x4a, 0x19,
	0x0b, 0xd1, 0xe0, 0xfc, 0x42, 0x59, 0x95, 0xbf, 0x05, 0x90, 0x79, 0xf7, 0x4c, 0x27, 0x74, 0xd0,
	0x7b, 0x50, 0x62, 0xc5, 0x74, 0x18, 0xeb, 0x47, 0xb2, 0x89, 0x54, 0xa0, 0xd4, 0x9e, 0xcf, 0x67,
	0xe5, 0x22, 0xf7, 0xaa, 0x31, 0xd6, 0xb7, 0x4c, 0x5c, 0x64, 0xe9, 0x0f, 0x41, 0x9f, 0x26, 0x4d,
	0x89, 0x35, 0xa6, 0x2c, 0x6e, 0x7d, 0x7f, 0x63, 0xb2, 0x9b, 0x35, 0x46, 0x7a, 0xac, 0x31, 0xcb,
	0xe5, 0xcb, 0xeb, 0x95, 0xdf, 0x04, 0x25, 0xad, 0x8b, 0x33, 0x70, 0x57, 0xa1, 0xc2, 0x23, 0x0a,
	0x15, 0x57, 0x15, 0x5a, 0xf9, 0x35, 0x0b, 0xcf, 0xd3, 0x88, 0x98, 0xba, 0x2c, 0x20, 0x9b, 0xb1,
	0x9a, 0x54, 0x2d, 0x3e, 0x56, 0x75, 0x4a, 0x7f, 0xf6, 0x01, 0xfa, 0x3f, 0x01, 0x39, 0xbe, 0xc2,
	0x84, 0x8e, 0x39, 0x91, 0x12, 0x8e, 0x77, 0x43, 0x8b, 0x8e, 0xef, 0xec, 0x89, 0xdc, 0xfd, 0x7b,
	0x02, 0x7d, 0x06, 0xcf, 0x1c, 0xd7, 0x65, 0x53, 0x3f, 0xb4, 0xfd, 0xe9, 0xb0, 0x43, 0x03, 0x3e,
	0x86, 0x12, 0x56, 0x16, 0xe8, 0x21, 0x07, 0xef, 0x99, 0x8f, 0xfc, 0x53, 0xce, 0x47, 0x61, 0xa3,
	0xf9, 0xa8, 0xfc, 0x23, 0xc0, 0xcb, 0x95, 0xe6, 0xf0, 0xa6, 0x2f, 0x13, 0x20, 0xfc, 0x2f, 0x02,
	0xc4, 0xf5, 0x09, 0xc8, 0x3e, 0x25, 0x01, 0xd2, 0x46, 0x04, 0xbc, 0xfd, 0x16, 0xa4, 0x48, 0x39,
	0x68, 0x1b, 0x4a, 0x2d, 0xcb, 0xac, 0xdb, 0x27, 0x87, 0xad, 0xa3, 0xfa, 0xbe, 0xf5, 0xc1, 0xaa,
	0x9b, 0xa5, 0x0c, 0xfa, 0x08, 0x0a, 0x1c, 0xad, 0x9d, 0x9c, 0x96, 0x04, 0xa4, 0x80, 0xcc, 0xff,
	0x5a, 0xf5, 0x46, 0xa3, 0x24, 0xee, 0x49, 0x3f, 0xff, 0xa6, 0x65, 0xde, 0x9e, 0x2d, 0xb6, 0x45,
	0xb4, 0xeb, 0xd1, 0x1e, 0xec, 0x36, 0xb1, 0x59, 0xc7, 0x76, 0xfb, 0xf4, 0x68, 0x35, 0xd6, 0x36,
	0x94, 0x96, 0x6c, 0x0d, 0xeb, 0xc0, 0x6a, 0x97, 0x04, 0xb4, 0x03, 0x2f, 0x96, 0xd0, 0x83, 0xef,
	0xf0, 0x4f, 0xf5, 0x76, 0x12, 0xbb, 0xd6, 0xbc, 0xfa, 0x53, 0xcb, 0x5c, 0xcd, 0x35, 0xe1, 0x7a,
	0xae, 0x09, 0x7f, 0xcc, 0x35, 0xe1, 0x97, 0x5b, 0x2d, 0x73, 0x7d, 0xab, 0x65, 0x7e, 0xbf, 0xd5,
	0x32, 0x67, 0xd5, 0xae, 0x17, 0xf6, 0xa6, 0x1d, 0xdd, 0x65, 0x43, 0x63, 0x9f, 0xcf, 0xc2, 0x07,
	0x36, 0xf5, 0x89, 0x13, 0x7a, 0xcc, 0x37, 0x16, 0x2f, 0xf2, 0xf9, 0x57, 0xc6, 0x05, 0x7f, 0x96,
	0xa3, 0x47, 0x68, 0xd2, 0xd9, 0xe2, 0xef, 0xed, 0xfb, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x99,
	0x20, 0xde, 0x49, 0xb1, 0x07, 0x00, 0x00,
}

func (m *GoodTil) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodTil) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoodTil) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GoodTilBlockHeight != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.GoodTilBlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CancelGoodTil) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelGoodTil) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelGoodTil) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderID) > 0 {
		i -= len(m.OrderID)
		copy(dAtA[i:], m.OrderID)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.OrderID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Order) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Order) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Order) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GoodTil != nil {
		{
			size, err := m.GoodTil.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOrder(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	{
		size := m.RemainingBalance.Size()
		i -= size
		if _, err := m.RemainingBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.RemainingQuantity.Size()
		i -= size
		if _, err := m.RemainingQuantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.Side != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Side))
		i--
		dAtA[i] = 0x40
	}
	{
		size := m.Quantity.Size()
		i -= size
		if _, err := m.Quantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.Price != nil {
		{
			size := m.Price.Size()
			i -= size
			if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintOrder(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.QuoteDenom) > 0 {
		i -= len(m.QuoteDenom)
		copy(dAtA[i:], m.QuoteDenom)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.QuoteDenom)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OrderData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GoodTil != nil {
		{
			size, err := m.GoodTil.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOrder(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Side != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Side))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.Quantity.Size()
		i -= size
		if _, err := m.Quantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.OrderBookID != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.OrderBookID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OrderBookData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderBookData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderBookData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QuoteDenom) > 0 {
		i -= len(m.QuoteDenom)
		copy(dAtA[i:], m.QuoteDenom)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.QuoteDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OrderBookRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderBookRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderBookRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RemainingBalance.Size()
		i -= size
		if _, err := m.RemainingBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.RemainingQuantity.Size()
		i -= size
		if _, err := m.RemainingQuantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.AccountNumber != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.AccountNumber))
		i--
		dAtA[i] = 0x30
	}
	if len(m.OrderID) > 0 {
		i -= len(m.OrderID)
		copy(dAtA[i:], m.OrderID)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.OrderID)))
		i--
		dAtA[i] = 0x2a
	}
	if m.OrderSeq != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.OrderSeq))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Side != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Side))
		i--
		dAtA[i] = 0x10
	}
	if m.OrderBookID != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.OrderBookID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OrderBookRecordData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderBookRecordData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderBookRecordData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RemainingBalance.Size()
		i -= size
		if _, err := m.RemainingBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.RemainingQuantity.Size()
		i -= size
		if _, err := m.RemainingQuantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.AccountNumber != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.AccountNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OrderID) > 0 {
		i -= len(m.OrderID)
		copy(dAtA[i:], m.OrderID)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.OrderID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOrder(dAtA []byte, offset int, v uint64) int {
	offset -= sovOrder(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GoodTil) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GoodTilBlockHeight != 0 {
		n += 1 + sovOrder(uint64(m.GoodTilBlockHeight))
	}
	return n
}

func (m *CancelGoodTil) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.OrderID)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	return n
}

func (m *Order) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovOrder(uint64(m.Type))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.QuoteDenom)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.Price != nil {
		l = m.Price.Size()
		n += 1 + l + sovOrder(uint64(l))
	}
	l = m.Quantity.Size()
	n += 1 + l + sovOrder(uint64(l))
	if m.Side != 0 {
		n += 1 + sovOrder(uint64(m.Side))
	}
	l = m.RemainingQuantity.Size()
	n += 1 + l + sovOrder(uint64(l))
	l = m.RemainingBalance.Size()
	n += 1 + l + sovOrder(uint64(l))
	if m.GoodTil != nil {
		l = m.GoodTil.Size()
		n += 1 + l + sovOrder(uint64(l))
	}
	return n
}

func (m *OrderData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderBookID != 0 {
		n += 1 + sovOrder(uint64(m.OrderBookID))
	}
	l = m.Price.Size()
	n += 1 + l + sovOrder(uint64(l))
	l = m.Quantity.Size()
	n += 1 + l + sovOrder(uint64(l))
	if m.Side != 0 {
		n += 1 + sovOrder(uint64(m.Side))
	}
	if m.GoodTil != nil {
		l = m.GoodTil.Size()
		n += 1 + l + sovOrder(uint64(l))
	}
	return n
}

func (m *OrderBookData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.QuoteDenom)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	return n
}

func (m *OrderBookRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderBookID != 0 {
		n += 1 + sovOrder(uint64(m.OrderBookID))
	}
	if m.Side != 0 {
		n += 1 + sovOrder(uint64(m.Side))
	}
	l = m.Price.Size()
	n += 1 + l + sovOrder(uint64(l))
	if m.OrderSeq != 0 {
		n += 1 + sovOrder(uint64(m.OrderSeq))
	}
	l = len(m.OrderID)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.AccountNumber != 0 {
		n += 1 + sovOrder(uint64(m.AccountNumber))
	}
	l = m.RemainingQuantity.Size()
	n += 1 + l + sovOrder(uint64(l))
	l = m.RemainingBalance.Size()
	n += 1 + l + sovOrder(uint64(l))
	return n
}

func (m *OrderBookRecordData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderID)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.AccountNumber != 0 {
		n += 1 + sovOrder(uint64(m.AccountNumber))
	}
	l = m.RemainingQuantity.Size()
	n += 1 + l + sovOrder(uint64(l))
	l = m.RemainingBalance.Size()
	n += 1 + l + sovOrder(uint64(l))
	return n
}

func sovOrder(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOrder(x uint64) (n int) {
	return sovOrder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GoodTil) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodTil: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodTil: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodTilBlockHeight", wireType)
			}
			m.GoodTilBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodTilBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelGoodTil) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelGoodTil: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelGoodTil: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Order) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Order: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Order: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= OrderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v Price
			m.Price = &v
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			m.Side = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Side |= Side(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingQuantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RemainingQuantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RemainingBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodTil", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GoodTil == nil {
				m.GoodTil = &GoodTil{}
			}
			if err := m.GoodTil.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBookID", wireType)
			}
			m.OrderBookID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderBookID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			m.Side = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Side |= Side(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodTil", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GoodTil == nil {
				m.GoodTil = &GoodTil{}
			}
			if err := m.GoodTil.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderBookData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderBookData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderBookData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderBookRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderBookRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderBookRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBookID", wireType)
			}
			m.OrderBookID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderBookID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			m.Side = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Side |= Side(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderSeq", wireType)
			}
			m.OrderSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderSeq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountNumber", wireType)
			}
			m.AccountNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingQuantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RemainingQuantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RemainingBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderBookRecordData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderBookRecordData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderBookRecordData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountNumber", wireType)
			}
			m.AccountNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingQuantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RemainingQuantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RemainingBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrder(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOrder
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOrder
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOrder
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOrder        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrder          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOrder = fmt.Errorf("proto: unexpected end of group")
)
