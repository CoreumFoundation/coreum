// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: coreum/dex/v1/orders.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgIssue defines message to issue new fungible token.
type OrderLimit struct {
	Owner         string        `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	OfferedAmount types.Coin    `protobuf:"bytes,2,opt,name=offered_amount,json=offeredAmount,proto3" json:"offered_amount"`
	SellPrice     types.DecCoin `protobuf:"bytes,3,opt,name=sell_price,json=sellPrice,proto3" json:"sell_price"`
}

func (m *OrderLimit) Reset()         { *m = OrderLimit{} }
func (m *OrderLimit) String() string { return proto.CompactTextString(m) }
func (*OrderLimit) ProtoMessage()    {}
func (*OrderLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_016476bcd33ac584, []int{0}
}
func (m *OrderLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderLimit.Merge(m, src)
}
func (m *OrderLimit) XXX_Size() int {
	return m.Size()
}
func (m *OrderLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderLimit.DiscardUnknown(m)
}

var xxx_messageInfo_OrderLimit proto.InternalMessageInfo

func init() {
	proto.RegisterType((*OrderLimit)(nil), "coreum.dex.v1.OrderLimit")
}

func init() { proto.RegisterFile("coreum/dex/v1/orders.proto", fileDescriptor_016476bcd33ac584) }

var fileDescriptor_016476bcd33ac584 = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x3d, 0x4e, 0xc3, 0x30,
	0x18, 0x86, 0x63, 0xfe, 0xa4, 0x1a, 0x95, 0x21, 0xea, 0x50, 0x2a, 0x64, 0x2a, 0xa6, 0x4e, 0xb6,
	0x02, 0x5c, 0xa0, 0x2d, 0xea, 0x84, 0x54, 0xd4, 0x91, 0xa5, 0x4a, 0x9c, 0xaf, 0xc5, 0x52, 0xe3,
	0xaf, 0xb2, 0x9d, 0x50, 0x6e, 0xc1, 0x45, 0xb8, 0x47, 0xc7, 0x8e, 0x4c, 0x08, 0x92, 0x8b, 0xa0,
	0x38, 0x19, 0x18, 0xd8, 0x5e, 0xff, 0xbc, 0xcf, 0x2b, 0x3d, 0x74, 0x20, 0xd1, 0x40, 0x9e, 0x89,
	0x14, 0x76, 0xa2, 0x88, 0x04, 0x9a, 0x14, 0x8c, 0xe5, 0x5b, 0x83, 0x0e, 0xc3, 0x6e, 0xf3, 0xc6,
	0x53, 0xd8, 0xf1, 0x22, 0x1a, 0x30, 0x89, 0x36, 0x43, 0x2b, 0x92, 0xd8, 0x82, 0x28, 0xa2, 0x04,
	0x5c, 0x1c, 0x09, 0x89, 0x4a, 0x37, 0xdf, 0x07, 0xbd, 0x35, 0xae, 0xd1, 0x47, 0x51, 0xa7, 0xe6,
	0xf6, 0xe6, 0x83, 0x50, 0x3a, 0xaf, 0xa9, 0x8f, 0x2a, 0x53, 0x2e, 0xec, 0xd1, 0x53, 0x7c, 0xd5,
	0x60, 0xfa, 0x64, 0x48, 0x46, 0x9d, 0x45, 0x73, 0x08, 0x67, 0xf4, 0x02, 0x57, 0x2b, 0x30, 0x90,
	0x2e, 0xe3, 0x0c, 0x73, 0xed, 0xfa, 0x47, 0x43, 0x32, 0x3a, 0xbf, 0xbd, 0xe4, 0xcd, 0x26, 0xaf,
	0x37, 0x79, 0xbb, 0xc9, 0xa7, 0xa8, 0xf4, 0xe4, 0x64, 0xff, 0x75, 0x1d, 0x2c, 0xba, 0x6d, 0x6d,
	0xec, 0x5b, 0xe1, 0x98, 0x52, 0x0b, 0x9b, 0xcd, 0x72, 0x6b, 0x94, 0x84, 0xfe, 0xb1, 0x67, 0x5c,
	0xfd, 0xcb, 0x78, 0x00, 0xf9, 0x07, 0xd3, 0xa9, 0x5b, 0x4f, 0x75, 0x69, 0x32, 0xdf, 0xff, 0xb0,
	0x60, 0x5f, 0x32, 0x72, 0x28, 0x19, 0xf9, 0x2e, 0x19, 0x79, 0xaf, 0x58, 0x70, 0xa8, 0x58, 0xf0,
	0x59, 0xb1, 0xe0, 0x39, 0x5a, 0x2b, 0xf7, 0x92, 0x27, 0x5c, 0x62, 0x26, 0xa6, 0xde, 0xce, 0x0c,
	0x73, 0x9d, 0xc6, 0x4e, 0xa1, 0x16, 0xad, 0xca, 0xe2, 0x5e, 0xec, 0xbc, 0x4f, 0xf7, 0xb6, 0x05,
	0x9b, 0x9c, 0x79, 0x0f, 0x77, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc8, 0x3e, 0x2b, 0x78, 0x6a,
	0x01, 0x00, 0x00,
}

func (m *OrderLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SellPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOrders(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.OfferedAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOrders(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintOrders(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOrders(dAtA []byte, offset int, v uint64) int {
	offset -= sovOrders(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OrderLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovOrders(uint64(l))
	}
	l = m.OfferedAmount.Size()
	n += 1 + l + sovOrders(uint64(l))
	l = m.SellPrice.Size()
	n += 1 + l + sovOrders(uint64(l))
	return n
}

func sovOrders(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOrders(x uint64) (n int) {
	return sovOrders(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OrderLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfferedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrders
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OfferedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrders
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SellPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrders(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrders
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOrders
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOrders
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOrders
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOrders        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrders          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOrders = fmt.Errorf("proto: unexpected end of group")
)
