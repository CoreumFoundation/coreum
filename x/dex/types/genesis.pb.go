// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: coreum/dex/v1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the module genesis state.
type GenesisState struct {
	// params defines all the parameters of the module.
	Params     Params                `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	OrderBooks []OrderBookDataWithID `protobuf:"bytes,2,rep,name=order_books,json=orderBooks,proto3" json:"order_books"`
	Orders     []Order               `protobuf:"bytes,3,rep,name=orders,proto3" json:"orders"`
	// order_sequence is current order sequence;
	OrderSequence              uint64                    `protobuf:"varint,4,opt,name=order_sequence,json=orderSequence,proto3" json:"order_sequence,omitempty"`
	AccountsDenomsOrdersCounts []AccountDenomOrdersCount `protobuf:"bytes,5,rep,name=accounts_denoms_orders_counts,json=accountsDenomsOrdersCounts,proto3" json:"accounts_denoms_orders_counts"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9d24a0566883c25, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetOrderBooks() []OrderBookDataWithID {
	if m != nil {
		return m.OrderBooks
	}
	return nil
}

func (m *GenesisState) GetOrders() []Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

func (m *GenesisState) GetOrderSequence() uint64 {
	if m != nil {
		return m.OrderSequence
	}
	return 0
}

func (m *GenesisState) GetAccountsDenomsOrdersCounts() []AccountDenomOrdersCount {
	if m != nil {
		return m.AccountsDenomsOrdersCounts
	}
	return nil
}

// OrderBookDataWithID is a order book data with it's corresponding ID.
type OrderBookDataWithID struct {
	// id is order book ID.
	ID uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// data is order book data.
	Data OrderBookData `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (m *OrderBookDataWithID) Reset()         { *m = OrderBookDataWithID{} }
func (m *OrderBookDataWithID) String() string { return proto.CompactTextString(m) }
func (*OrderBookDataWithID) ProtoMessage()    {}
func (*OrderBookDataWithID) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9d24a0566883c25, []int{1}
}
func (m *OrderBookDataWithID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderBookDataWithID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderBookDataWithID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderBookDataWithID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderBookDataWithID.Merge(m, src)
}
func (m *OrderBookDataWithID) XXX_Size() int {
	return m.Size()
}
func (m *OrderBookDataWithID) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderBookDataWithID.DiscardUnknown(m)
}

var xxx_messageInfo_OrderBookDataWithID proto.InternalMessageInfo

func (m *OrderBookDataWithID) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *OrderBookDataWithID) GetData() OrderBookData {
	if m != nil {
		return m.Data
	}
	return OrderBookData{}
}

// AccountDenomOrderCount is a count of orders per account and denom.
type AccountDenomOrdersCount struct {
	AccountNumber uint64 `protobuf:"varint,1,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	Denom         string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	OrdersCount   uint64 `protobuf:"varint,3,opt,name=orders_count,json=ordersCount,proto3" json:"orders_count,omitempty"`
}

func (m *AccountDenomOrdersCount) Reset()         { *m = AccountDenomOrdersCount{} }
func (m *AccountDenomOrdersCount) String() string { return proto.CompactTextString(m) }
func (*AccountDenomOrdersCount) ProtoMessage()    {}
func (*AccountDenomOrdersCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9d24a0566883c25, []int{2}
}
func (m *AccountDenomOrdersCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountDenomOrdersCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountDenomOrdersCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountDenomOrdersCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountDenomOrdersCount.Merge(m, src)
}
func (m *AccountDenomOrdersCount) XXX_Size() int {
	return m.Size()
}
func (m *AccountDenomOrdersCount) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountDenomOrdersCount.DiscardUnknown(m)
}

var xxx_messageInfo_AccountDenomOrdersCount proto.InternalMessageInfo

func (m *AccountDenomOrdersCount) GetAccountNumber() uint64 {
	if m != nil {
		return m.AccountNumber
	}
	return 0
}

func (m *AccountDenomOrdersCount) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *AccountDenomOrdersCount) GetOrdersCount() uint64 {
	if m != nil {
		return m.OrdersCount
	}
	return 0
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "coreum.dex.v1.GenesisState")
	proto.RegisterType((*OrderBookDataWithID)(nil), "coreum.dex.v1.OrderBookDataWithID")
	proto.RegisterType((*AccountDenomOrdersCount)(nil), "coreum.dex.v1.AccountDenomOrdersCount")
}

func init() { proto.RegisterFile("coreum/dex/v1/genesis.proto", fileDescriptor_a9d24a0566883c25) }

var fileDescriptor_a9d24a0566883c25 = []byte{
	// 444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x8d, 0x1d, 0x37, 0x12, 0x9b, 0x86, 0xc3, 0x12, 0xc0, 0x18, 0x70, 0x43, 0x24, 0x50, 0x4e,
	0xb6, 0x92, 0x0a, 0xee, 0xa4, 0x16, 0x28, 0x42, 0x02, 0xe4, 0x1e, 0x90, 0xb8, 0x58, 0x6b, 0xef,
	0xca, 0xb5, 0x2a, 0x7b, 0x82, 0x77, 0x1d, 0xa5, 0x7f, 0xc1, 0x67, 0xf5, 0xd8, 0x23, 0xe2, 0x50,
	0x21, 0xe7, 0x47, 0x90, 0x67, 0xb7, 0x52, 0x53, 0x15, 0x6e, 0x9e, 0x37, 0x6f, 0xde, 0x9b, 0x7d,
	0x1e, 0xf2, 0x3c, 0x83, 0x5a, 0x34, 0x65, 0xc8, 0xc5, 0x36, 0xdc, 0xcc, 0xc3, 0x5c, 0x54, 0x42,
	0x16, 0x32, 0x58, 0xd7, 0xa0, 0x80, 0x8e, 0x74, 0x33, 0xe0, 0x62, 0x1b, 0x6c, 0xe6, 0xde, 0xb3,
	0x7d, 0x2e, 0xd4, 0x5c, 0xd4, 0x9a, 0xe9, 0x79, 0xfb, 0xad, 0x35, 0xab, 0x59, 0x69, 0x54, 0xbc,
	0x71, 0x0e, 0x39, 0xe0, 0x67, 0xd8, 0x7d, 0x69, 0x74, 0xfa, 0xdb, 0x26, 0x87, 0x1f, 0xb5, 0xdb,
	0xa9, 0x62, 0x4a, 0xd0, 0x63, 0x32, 0xd0, 0x63, 0xae, 0x35, 0xb1, 0x66, 0xc3, 0xc5, 0xe3, 0x60,
	0xcf, 0x3d, 0xf8, 0x8a, 0xcd, 0xa5, 0x73, 0x79, 0x7d, 0xd4, 0x8b, 0x0d, 0x95, 0xae, 0xc8, 0x10,
	0xd7, 0x48, 0x52, 0x80, 0x73, 0xe9, 0xda, 0x93, 0xfe, 0x6c, 0xb8, 0x98, 0xde, 0x99, 0xfc, 0xd2,
	0x31, 0x96, 0x00, 0xe7, 0x11, 0x53, 0xec, 0x5b, 0xa1, 0xce, 0x56, 0x91, 0x91, 0x21, 0x70, 0xd3,
	0x92, 0x74, 0x41, 0x06, 0x58, 0x49, 0xb7, 0x8f, 0x2a, 0xe3, 0x7b, 0x55, 0x8c, 0xbd, 0x66, 0xd2,
	0xd7, 0xe4, 0xa1, 0xb6, 0x97, 0xe2, 0x47, 0x23, 0xaa, 0x4c, 0xb8, 0xce, 0xc4, 0x9a, 0x39, 0xf1,
	0x08, 0xd1, 0x53, 0x03, 0x52, 0x20, 0x2f, 0x59, 0x96, 0x41, 0x53, 0x29, 0x99, 0x70, 0x51, 0x41,
	0x29, 0x13, 0x2d, 0x90, 0x68, 0xd0, 0x3d, 0x40, 0xc7, 0x37, 0x77, 0x1c, 0xdf, 0xeb, 0x99, 0xa8,
	0x9b, 0x40, 0x77, 0x79, 0xd2, 0xd5, 0x66, 0x07, 0xef, 0x46, 0x12, 0xfb, 0xf2, 0x16, 0x41, 0x4e,
	0x05, 0x79, 0x74, 0xcf, 0xa3, 0xe9, 0x13, 0x62, 0x17, 0x1c, 0xe3, 0x1d, 0x2d, 0x07, 0xed, 0xf5,
	0x91, 0xbd, 0x8a, 0x62, 0xbb, 0xe0, 0xf4, 0x1d, 0x71, 0x38, 0x53, 0xcc, 0xb5, 0x31, 0xf8, 0x17,
	0xff, 0x8b, 0xcf, 0x98, 0x23, 0x7f, 0x7a, 0x41, 0x9e, 0xfe, 0x63, 0xc7, 0x2e, 0x19, 0xb3, 0x5f,
	0x52, 0x35, 0x65, 0x2a, 0x6a, 0xb4, 0x75, 0xe2, 0x91, 0x41, 0x3f, 0x23, 0x48, 0xc7, 0xe4, 0x00,
	0x03, 0x41, 0xeb, 0x07, 0xb1, 0x2e, 0xe8, 0x2b, 0x72, 0x78, 0x3b, 0x1f, 0xb7, 0x8f, 0xa3, 0xfa,
	0x4f, 0x9b, 0x0c, 0x3e, 0x5d, 0xb6, 0xbe, 0x75, 0xd5, 0xfa, 0xd6, 0x9f, 0xd6, 0xb7, 0x7e, 0xee,
	0xfc, 0xde, 0xd5, 0xce, 0xef, 0xfd, 0xda, 0xf9, 0xbd, 0xef, 0xf3, 0xbc, 0x50, 0x67, 0x4d, 0x1a,
	0x64, 0x50, 0x86, 0x27, 0xf8, 0x90, 0x0f, 0xd0, 0x54, 0x9c, 0xa9, 0x02, 0xaa, 0xd0, 0x9c, 0xe9,
	0xe6, 0x6d, 0xb8, 0xc5, 0x5b, 0x55, 0x17, 0x6b, 0x21, 0xd3, 0x01, 0x9e, 0xe4, 0xf1, 0xdf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x7b, 0xfd, 0x20, 0x4e, 0x0d, 0x03, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccountsDenomsOrdersCounts) > 0 {
		for iNdEx := len(m.AccountsDenomsOrdersCounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccountsDenomsOrdersCounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.OrderSequence != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.OrderSequence))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.OrderBooks) > 0 {
		for iNdEx := len(m.OrderBooks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrderBooks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *OrderBookDataWithID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderBookDataWithID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderBookDataWithID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.ID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccountDenomOrdersCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountDenomOrdersCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountDenomOrdersCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrdersCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.OrdersCount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if m.AccountNumber != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.AccountNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.OrderBooks) > 0 {
		for _, e := range m.OrderBooks {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.OrderSequence != 0 {
		n += 1 + sovGenesis(uint64(m.OrderSequence))
	}
	if len(m.AccountsDenomsOrdersCounts) > 0 {
		for _, e := range m.AccountsDenomsOrdersCounts {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *OrderBookDataWithID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovGenesis(uint64(m.ID))
	}
	l = m.Data.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *AccountDenomOrdersCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountNumber != 0 {
		n += 1 + sovGenesis(uint64(m.AccountNumber))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.OrdersCount != 0 {
		n += 1 + sovGenesis(uint64(m.OrdersCount))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBooks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBooks = append(m.OrderBooks, OrderBookDataWithID{})
			if err := m.OrderBooks[len(m.OrderBooks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, Order{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderSequence", wireType)
			}
			m.OrderSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderSequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountsDenomsOrdersCounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountsDenomsOrdersCounts = append(m.AccountsDenomsOrdersCounts, AccountDenomOrdersCount{})
			if err := m.AccountsDenomsOrdersCounts[len(m.AccountsDenomsOrdersCounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderBookDataWithID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderBookDataWithID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderBookDataWithID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountDenomOrdersCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountDenomOrdersCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountDenomOrdersCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountNumber", wireType)
			}
			m.AccountNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrdersCount", wireType)
			}
			m.OrdersCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrdersCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
